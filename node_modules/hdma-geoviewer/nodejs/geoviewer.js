var HDMA=require("./api/hdma"),
	MOMENT=require("moment"),
	LOGGER=require("./config/logger.js"),
	TWITTER=require('twit'),
	EXPRESS=require("EXPRESS"),
	PATH=require("path"),
	Q=require("q"),
	CONFIG_GEOVIEWER=HDMA.common.require('../../config');



//factory
module.exports=function(options){
	//options
	options=options || {};
	Output.io=options.io=options.io || null;
	Output.mongodb=options.mongodb=options.mongodb || null;
	Output.router=options.router=options.router || null;


	var ipAddress=(function(){
			var ip=null,
					networkInterface=require("os").networkInterfaces(),
					ips=networkInterface['Local Area Connection'] || networkInterface['Wireless Network Connection'];


			ips.forEach(function(obj,i){
				if(obj.family=='IPv4'&&obj.address.split(".").length==4){
					ip=obj.address
				}
			})
			return ip
		})();


	//server name
	Output.serverName=(ipAddress=='130.191.118.59')?"vision":"ec2";

	//properties
	Output.topic=null;
	Output.keywords="@showAll@";
	Output.stream=null;
	Output.users=[];
	Output.sockets={}
	Output.cacheTweets={}
	Output.mailOptions={
			to:"to/email",
			subject:"subject",
			text:"text"
	};
	Output.collectionTweet="twitterStreamingDB";


	//if there is a config_geoviewer, replace the default mongodb connection
	if(CONFIG_GEOVIEWER){
		var mongodb=CONFIG_GEOVIEWER.mongodb,
				twitterAPI=CONFIG_GEOVIEWER.twitter,
				gmail=CONFIG_GEOVIEWER.gmail;

		//gmail transporter
		if(gmail){
			Output.mailOptions.from=gmail.email || null;
			Output.mailOptions.to=gmail.to || null;
			Output.gmailTransporter=HDMA.common.gmailTransporter(gmail);
		}



		//twitter stream
		//check twitter API
		var isValid=true;
		for(var k in twitterAPI){
			if(!twitterAPI[k] || twitterAPI[k]==""){
				isValid=false;
			}
		}
		if(!isValid){
			console.log("There is no twitter api key in the config.js.");
			return;
		}

		Output.twitter_locations=new TWITTER(twitterAPI);
		Output.twitter_keywords=new TWITTER(twitterAPI);
		Output.collectionTweet=mongodb.collection || Output.collectionTweet;

		if(mongodb&&mongodb.ip&&mongodb.port&&mongodb.db){
			HDMA.mongodb.connect(mongodb.ip+":"+mongodb.port, mongodb.db).then(function(db){
				Output.mongodb=db;

				//init
				init();
			}).catch(function(err){
				console.log("MongoDB Connection error: ", err);
			})
		}
	}else{
		console.log('CANNOT READ CONFIG.JS FILE')
		return;
	}

}


//init
function init(){
	//ensure index
	Output.mongodb.collection(Output.collectionTweet).ensureIndex({"search_region":1, "created_at_local":-1, "text":"text"}, {name:"nodejs_ensure"}, function(e){
		console.log(Output.collectionTweet + ".text has been text indexed!")
	});


	//init router
	initRouter();

	//socket io
	initSocket();


	//init twitter streaming api
	initTwitterStreaming(function(){
		//callback functions after init twitter streaming engine

		//update cacace
		updateCache();
	});
}




//init socket.io
function initSocket(){
	if(Output.io){
		var io=Output.io;
		io.of("/socket-geoviewer")  //set a workspace to distinguish other sockets
			.on("connection", function(socket){
				//distinguish sockets and give it into differnet room (channel)
				var clientPath=socket.handshake.headers.referer;
					clientPath=clientPath.split("/"),
					path=clientPath[clientPath.length-1].toLowerCase() || "sandiego",
					room="area-sanDiego",
					topic=Output.topic.location[path];

				if(path!=""&&topic){room="area-"+topic.area;}

				//socket join room
				socket.join(room);

				//read cache tweets
				if(Output.cacheTweets){
					if(Output.cacheTweets[path]&&Output.cacheTweets[path].length>=0){
						var result="no correspoding topic: "+ path;

						if(topic){
							result={
								msg:"socket-geoviewer connected",
								cache:Output.cacheTweets[path],
								room:room,
								topic:{
									name: topic.area,
									bbox: topic.bbox || null,
									startDate: topic.startDate,
									endDate: topic.endDate,
									host:topic.host,
									layers:topic.layers
									//valid:(topic.endDate&&topic.endDate<=MOMENT())?false:true
								}
							}
						}

						//emit connected event
						socket.emit("connected", result);
					}
				}


				// The user it's added to the array if it doesn't exist
				if(Output.users.indexOf(socket.id) === -1) {
					Output.users.push(socket.id);
					socket.hdma={
						timestamp_since: MOMENT().unix()
					}
					Output.sockets[socket.id]=socket;
				}
				logConnectedUsers(room);



				// This handles when a user is disconnected
				socket.on("disconnect", function(o) {
					// find the user in the array
					var index = Output.users.indexOf(socket.id);
					if(index != -1) {
						// Eliminates the user from the array
						Output.users.splice(index, 1);
						delete Output.sockets[socket.id]
					}

					console.log(socket.id+": Disconnected!!");

					logConnectedUsers(room)
				});


				//spatial query
				socket.on("spatialQuery", function(obj, callback){
					var keyword=obj.keywords || null,
						geojsonPolygon=obj.geojsonPolygon || null,
						startDate=obj.startDate || null,
						endDate=obj.endDate || null,
						searchArea=obj.searchArea || null;


					var collection=Output.mongodb.collection(Output.collectionTweet),
						//sw=bbox.slice(0,2),
						//ne=bbox.slice(2,4),
						params={},
						options={
							sort:{"created_at_local":-1},
							//onEachTweet: null,
							limit:300,
							//batchSize:1000,
							//fields:["id_str","text","source","user","geo","lang","created_at_local"]
						};

						//search area
						if(searchArea){
							searchArea=(searchArea=="sanDiego")?"San Diego region":searchArea;
							//params["search_info.search_areas.name"]=searchArea;
							params["search_region"]=searchArea;
						}

						//if geojsonPolygon
						if(geojsonPolygon&&geojsonPolygon.geometry){
							//use 2dsphere index is faster
							params["coordinates"]={
							//params["coordinates.coordinates"]={  //2d index
								"$geoWithin":{
									//"$box":[sw, ne]
									//"$polygon":geojsonPolygon.geometry.coordinates[0]
									"$geometry":geojsonPolygon.geometry
								}
							}
						}

						//if keyword
						if(keyword&&keyword!=""){
							var excludes=[], keywords=[]
							/**
							keyword.split(",").map(function(k){
								k=String(k).trim();

								if(k.indexOf("$not(")!=-1){
									k.substring(k.lastIndexOf("(")+1, k.lastIndexOf(")")).split("|").map(function(v){excludes.push(new RegExp("(^| )"+String(v).trim()+"( |$)", "i"));})
								}else{
									keywords.push(new RegExp("(^| )"+String(k).trim()+"( |$)", "i"))
								}
							})
							*/

							keyword=keyword.split(" ").map(function(k){
								return String(k).trim().replace(/\"/g, "\"");
							}).join(" ")



							//if(keywords.length>0){params["text"]={"$all":keywords}}
							//if(excludes.length>0){params["text"]["$nin"]=excludes}

							//params["text"]={"$regex":"(^| )"+keyword+" ", "$options":"gi"}
							//params["text"]={"search":keyword}
							params["$text"]={"$search":keyword}
						}

						//if start and end data
						if(obj.startDate || obj.endDate){
							var dateParam={}
							if(obj.startDate){dateParam["$gte"]=new Date(MOMENT(obj.startDate).format("YYYY-MM-DDT00:00:00+00:00"))}
							if(obj.endDate){dateParam["$lt"]=new Date(MOMENT(obj.endDate).format("YYYY-MM-DDT00:00:00+00:00"))}
							params["created_at_local"]=dateParam
						}

						//only images
						var viewMode=obj.viewMode;
						if(viewMode!='both'){
							params["entities.media.0"]={"$exists":false}
							if(viewMode=="image"){params["entities.media.0"]={"$exists":true}}
						}


						//query
						HDMA.mongodb.query(Output.mongodb, Output.collectionTweet, params, options, function(err, results){
							if(callback){
								callback(results.map(function(t){return cleanTweet(t)}));
							}
							//socket.emit("spatialQuery-result", results)
						})

				})



				//login
				socket.on('login', function(obj, callback){
					if(obj.username&&obj.username!=""&&obj.password&&obj.password!=""){
						login(obj.username, obj.password, function(result){
							if(result.status=='ok'){
								result.downloadURL="http://vision.sdsu.edu/"+((path=='sandiego')?"hdma":"ec2")+"/query/getTweet/streaming?texts={texts}&startDate={startDate}&endDate={endDate}&source=streaming&bbox={bbox}&searchRegion={searchRegion}&excel=true&limit=100000";
							}

							if(callback){
								callback(result)
							}
						})
					}
				})


				//search twitter
				socket.on("twitterSearch", function(obj, callback){
					if(!obj){console.log("[ERROR] geoviewer.js: twitterSearch without query params!"); return; }

					twitter.get("search/tweets", obj, function(err, results, response){
						if(callback){callback(err, results)}
					})


				})

				//update
				socket.on("update", function(obj, callback){
					Output.update(obj, callback)
				})


			});

	}//end if options.io
}



//init router
function initRouter(){
	if(Output.router){
		var router=Output.router,
				domain="", domainFolder="";

		router.all(/^\/geoviewer$/, function(req, res) {res.redirect('geoviewer/'); }); //redirect /geoviewer to /geoviewer/. Because express cannot recognize 'hdma' path in iis url rewrite, thus need to add 'hdma' at the front
		router.get("/geoviewer/", function(req,res){
			//by default, it will redirect to san diego area
			//res.redirect(HDMA.common.getHostPath(req)+"/geoviewer/sanDiego");
			res.render("geoviewer/final/home", {areas:CONFIG_GEOVIEWER.areas})
		});
		router.get("/geoviewer/:area", function(req,res){
			Output.getArea(req,res, function(params){
				domain='geoviewer';
				domainFolder="geoviewer/final";
				res.render(domainFolder+'/index', params);
			});
		});
		//router.get("/geoviewer/:topic", Output.getTopic)
		router.get("/geoviewer/dev/:version/:area", function(req,res){
			Output.getArea(req,res, function(params){
				var version=req.params.version;
				domainFolder=domain='geoviewer/dev/'+version;

				//params
				params.version=version

				res.render(domainFolder+"/index", params)
			});
		});
		router.get("/geoviewer/status/check", Output.checkStatus)


		//static files
		router.use("/"+domain, EXPRESS.static(PATH.join(__dirname, "/public/" + domainFolder)));
	}
}




//customize array myUnshift function
Array.prototype.myUnshift=function(value){
	this.unshift(value);
	//Output.workingTime=MOMENT().unix();
}



// A log function for debugging purposes
function logConnectedUsers(room) {
    console.log("============= GeoViewer: CONNECTED USERS ==============");
    console.log("Clients in " + room +" :: " + Output.io.of("/socket-geoviewer").clients(room).length);
		console.log("Total Clients are :: "+ Output.users.length)
    console.log("============================================");
}



//init twitter streaming api
function initTwitterStreaming(callback){

	//get all stremaing topics
	//either from config_geoviewer or mongodb
	(function(){
		var defer=Q.defer();

		if(CONFIG_GEOVIEWER&&CONFIG_GEOVIEWER.areas){
			var results=CONFIG_GEOVIEWER.areas;

			results.forEach(function(obj, i){
				obj.startDate=MOMENT(obj.startDate).toDate();
				obj.endDate=MOMENT(obj.endDate).toDate();
			})

			defer.resolve(results)
		}else{
			HDMA.mongodb.query(Output.mongodb, "streamingTopics",{},{}).then(function(results){
				defer.resolve(results);
			}).catch(function(err){
				defer.reject(err);
			});
		}

		return defer.promise;
	})().then(function(results){

		var locations="-117.595898,32.534180,-115.835742,33.507161",//default San Diego region
				collection=Output.mongodb.collection(Output.collectionTweet);

		//check results
		if(results&&results.length>0){
			var keywords=[],
				locations=[],
				bboxs=[];

			//Output.topic
			Output.topic={
				keywords:[],
				location:{}
			};

			//get keywords and locations
			results.forEach(function(obj,i){
				if(obj.host==Output.serverName || obj.host=="both"){
					//check the endDate
					if(!obj.endDate || obj.endDate > MOMENT()){
						if(obj.filterParameter=='track'){keywords.push(obj)}
						if(obj.filterParameter=='location'){bboxs.push(obj.bbox);locations.push(obj);}
					}

					if(obj.filterParameter=='location'){obj["key"]=obj.area.toLowerCase().replace(/\+/g,"_"); Output.topic.location[obj["key"]]=obj}
				}
			});

			//Output.topic
			Output.topic.keywords=keywords;


			//twitter engine for LOCATION
			console.log("*********************************************");
			console.log("Twitter Streaming locations ("+bboxs.length+"): "+ bboxs.join("; "))
			console.log("*********************************************");
			if(bboxs.length>0){
				Output.stream=Output.twitter_locations.stream('statuses/filter', {locations:bboxs.join(",")});

				//when getting a tweet
				Output.stream.on('tweet', function(data){
						var coordinates=data.coordinates;

						if(coordinates&&coordinates.coordinates.length==2){
							var coord=coordinates.coordinates, temp, index, center={lat:null, lng:null}, min, distances=[], dist;

							//get which area the tweet is located
							for(var i=0, length=bboxs.length; i<length; i++){
								temp=String(bboxs[i]).split(",").map(function(o){return parseFloat(o)});

								center.lat=Math.round((temp[1]+temp[3])/2);
								center.lng=Math.round((temp[0]+temp[2])/2);

								dist=Math.round(Math.sqrt(Math.pow((Math.round(coord[0])-center.lng),2)+Math.pow((Math.round(coord[1])-center.lat),2)))
								distances.push({id:i, distance:dist})
							}

							//sort distnance to get index
							distances.sort(function(a,b){return a.distance - b.distance})
							index=distances[0].id

							if(index>=0){
								var area=locations[index].area,
									key=locations[index].key,
									searchInfo={
										keywords:[],
										search_areas:[{name:((area=="sanDiego")?"San Diego region":area), coordinates:locations[index].bbox, radius:0}],
										topics:[]
									}
								//clean tweet
								data=cleanData(data, searchInfo)

								//add search_region into data and let mongodb to index this col with text index to increase the performance.
								//it is because mongodb cannot allow combine text index and multikey index. For exmple: {"text":"text", "search_info.search_areas.name":1} is not allowed.
								data["search_region"]=(area=="sanDiego")?"San Diego region":area;

								//save to mongodb
								collection.insert(data, {w:1}, function(err, doc){
									if(err){console.log("[ERROR] insert in mongodb: "+ err)}
								})


								//get the first user socket
								var socketID=Output.users[0],
									socket=Output.sockets[socketID],
									showData=true; //false;

									//clean data
									var tweet=cleanTweet(data),
											blacklists=locations[index].blacklists || null,
											screen_name=tweet.user.screen_name,
											isWhite=(function(){
												var output=true;
												if(blacklists&&blacklists.length){
													if(blacklists.indexOf(screen_name)!=-1){
														output=false;
													}
												}
												return output;
											})();

									//console.log(tweet.filter_level, tweet.possibly_sensitive)
									//set up the filter_level=='low'. the medium seems too strict and no tweets popup on the geoviewer
									if(tweet.filter_level=='low'&&tweet.possibly_sensitive==false&&isWhite){
										//cache tweet into Output.cacheTweets
										if(Output.cacheTweets[key]&&Output.cacheTweets[key].length>=0){
											//remove last one and insert the tweet at the beginning
											if(Output.cacheTweets[key].length>=300){
												Output.cacheTweets[key].pop();
												Output.cacheTweets[key].myUnshift(tweet); //use myUnshift to check if the streaming API is working or not.
											}else{
												Output.cacheTweets[key].myUnshift(tweet);//use myUnshift to check if the streaming API is working or not.
											}
										}

										//emit only there is a user
										if(Output.users.length>0){
											if(showData){
												//socket.broadcast.to("area-"+area).emit('newTweet', tweet) //broadcast tweet to other users except the user who init stream
												//socket.to("area-"+area).emit('newTweet', tweet) //emit tweet to the user who init stream

												//use io to all sockets which are under the "socket-geoviewer" namespace and "area-" room to receive new tweet
												Output.io.of('/socket-geoviewer').in("area-"+area).emit('newTweet', tweet)
											}
										}

									}
							}
						}
					});

					//detect error events
					["error", "warning", "disconnect", "block", "limit", "blocked"].forEach(function(v){
						Output.stream.on(v, function(obj){
							console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
							console.log("["+v.toUpperCase()+"] twitter.streaming.location: ")
							console.log(obj);
							console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

							//send mail
							Output.mailOptions.subject+="["+v.toUpperCase()+"] Twitter Streaming Engine on "+Output.serverName.toUpperCase();
							Output.mailOptions.text=JSON.stringify(obj)
							if(Output.gmailTransporter){
								Output.gmailTransporter.sendMail(Output.mailOptions, function(err, result){
									console.log(err, result)
								})
							}

						});
					});

			}// end if bbox.length>0



			console.log("*********************************************");
			console.log("Twitter Streaming Keywords ("+keywords.length+"): "+ keywords.join(", "))
			console.log("*********************************************");
			//twitter engine for KEYWORD
			if(keywords.length>0){
				keywords=keywords.map(function(o){return o.keyword})
				var bbox_us=[-127.87106262,22.87753347,-65.35692717,48.2441996],
					bbox=[0,-90,180,90],
					searchInfo={
						keywords:[],
						search_areas:[{name:"the whole world", coordinates:bbox, radius:0}],
						topics:[]
					},
					onlyGPSTweet=false;

				//search all tweets including non-gps tweets with keywords
				//and check 1)if they are gps-tweet and 2) located in the U.S.
				//then save into db
				Output.stream_keyword=Output.twitter_keywords.stream('statuses/filter', {track:keywords.join(",")});
				Output.stream_keyword.on('tweet', function(data){
						if(data){
							var isValid=true;

							//only gps tweet
							if(onlyGPSTweet){
								//contain geo
								if(data.geo&&data.geo.coordinates&&data.geo.coordinates.length==2){
									var coords=data.geo.coordinates,
										lng=coords[1],
										lat=coords[0];

									//if the coordinates located in the U.S.
									if(lat>=bbox_us[1]&&lat<=bbox_us[3]&&lng>=bbox_us[0]&&lng<=bbox_us[2]){
										searchInfo.search_areas[0]={name:"U.S.", coordinates:bbox_us, radius:0}
									}
								}else{
									isValid=false;
								}
							}


							//save to mongodb only if the tweet is valid
							if(isValid){
								data=cleanData(data, searchInfo, keywords)

								collection.insert(data, {w:1}, function(err, doc){
									if(err){console.log("[ERROR] insert in mongodb: "+ err)}
								});
							}
						}
				});


				//streaming error
				//detect error events
				["error", "warning", "disconnect", "block", "limit", "blocked"].forEach(function(v){
					Output.stream_keyword.on(v, function(obj){
						console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
						console.log("["+v.toUpperCase()+"] twitter.streaming.keyword: ")
						console.log(obj);
						console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

						//send mail
						Output.mailOptions.subject+="["+v.toUpperCase()+"] Twitter Streaming Keyword Engine on "+Output.serverName.toUpperCase();
						Output.mailOptions.text=JSON.stringify(obj)
						if(Output.gmailTransporter){
							Output.gmailTransporter.sendMail(Output.mailOptions, function(err, result){
								console.log(err, result)
							})
						}
					});
				})


			}



			//callback
			if(callback){callback()}

		}//end if results

	}).catch(function(err){
		console.log(err)
	})


}



//update cache
function updateCache(){
	//read locations and create params
	var params=[], bbox=[], obj;
	if(Output.topic.location){
		for(var key in Output.topic.location){//Output.topic.locations.forEach(function(obj, i){
			obj=Output.topic.location[key];
			bbox=String(obj.bbox).split(",").map(function(o){return parseFloat(o)})
			params.push({
				area:obj.area,
				params:{
					"search_region":(obj.area=='sanDiego')?"San Diego region":obj.area,
					"coordinates.coordinates":{
						"$geoWithin":{
							"$box":[[bbox[0], bbox[1]],[bbox[2], bbox[3]]]
						}
					}
				},
				key:key
			})
		}//)
	}


	//update tweets in each area
	var num=0, options={"sort":{"created_at_local":-1}, limit:300}
	readTweet()


	//query mongodb to get recently tweets
	function readTweet(){
		if(num<params.length&&params[num].params){
			var param=params[num];
			HDMA.mongodb.query(Output.mongodb, Output.collectionTweet, param.params, options , function(err, results){
				if(err){console.log("[ERROR] updateCache: query mongodb error "); return; }

				Output.cacheTweets[param.key]=[];
				if(results&&results.length>0){
					//clean tweet
					results=results.map(function(t){return cleanTweet(t)});

					Output.cacheTweets[param.key]=results;
					console.log("GeoViewer readed cache tweets in '"+param.area+"(key="+param.key+")'");
					console.log("************************************************");
				}

				//read tweets in the next area
				num++;
				readTweet();
			});
		}
	}
}





//clean tweet
function cleanData(t, searchInfo, matchKeywords){
	t["timestamp_ms"]=parseInt(t["timestamp_ms"])

	//created_at >> convert string to date object
	var mCreatedAt=MOMENT(t["timestamp_ms"]),
		localZone=-8,
		mCreatedAtLocal=MOMENT(t["timestamp_ms"]+(localZone*60*60*1000));

	t['created_at']=mCreatedAt.toDate();

	//created_at_local
	t['created_at_local']=mCreatedAtLocal.toDate();

	//source
	t['source_clean']=HDMA.common.getTextFromHTMLTag(t['source'],'a');

	//search_info
	if(!searchInfo){
		searchInfo={
			keywords:[],
			search_areas:[],
			topics:[]
		}
	}


	//match keywords since 3/3/2015
	if(matchKeywords&&matchKeywords.length>0){
		searchInfo.keywords=[];

		//var matchID=matchKeywords.indexOf(t.text);
		var matchTexts=(t.text)?t.text.toLowerCase():null;//.split(" ");
		if(matchTexts){
			matchKeywords.forEach(function(v,i){
				if(matchTexts.indexOf(v)!=-1){
					searchInfo.keywords.push(v)
				}
			});
		}
	}


	t['search_info']=searchInfo

	return t
}



//login
//login
function login(username, password, callback){
		if(username&&username!=""&&password&&password!=""){
			//login
			HDMA.common.login(username, password, Output.mongodb, function(result){
				if(result.status=='ok'){
					var profile=result.profile;

					//get addKeyword / edit topic webpage if user is belonged to administrator
					var isAdmin=false;
					result.groups.forEach(function(group, i){
						if(group=='administrator'){
							isAdmin=true
						}
					});

					if(isAdmin){

					}
				}

				if(callback){callback(result)}
			});
		}else{
			if(callback){
				callback({status:"error", msg:"no username or password. Please check again."})
			}
		}

}



//clean tweet
function cleanTweet(t){
	var fields=["coordinates", "created_at", "created_at_local", "entities", "geo", "id_str", "lang", "place", "retweet_count", "retweeted", "search_info", "source", "text", "user", "possibly_sensitive", "filter_level", "note"],
		obj={};

	fields.forEach(function(k){
		//if(!t[k]==null){
			obj[k]=t[k]
		//}
	});

	return obj
}




//Ouput
var Output={

	//get topic
	getTopic: function(req, res){
		var topic=req.params.topic,
			topics={
				"wildfire":{name:"wildfire", keywords:["wildfire","fire", "#4SFIRE"]}
			},
			json={};
		if(topic&&topic!=""&&topics[topic]){
			var obj=topics[topic];

			json={
				name:obj.name,
				defaultKeywords:obj.keywords
			}
		}

		res.render('geoviewer/index', {json: JSON.stringify(json)})
	},


	//get area
	getArea: function(req, res, callback){
		var area=req.params.area,
			topic=Output.topic.location;

		if(!area||area==""){
			res.redirect(HDMA.common.getHostPath(req)+"/geoviewer/sanDiego");
		}else{
			//check each topic to see if the requested area match the topic or not
			area=area.toLowerCase();

			var hostPath=HDMA.common.getHostPath(req);

			if(!topic[area]){
				//if the topic is not belonged to vision, try ec2 first. Otherwise, redirect to sandiego
				if(hostPath=='hdma'){
					res.redirect("ec2/geoviewer/"+area);
				}else{
					res.redirect("hdma/geoviewer/sanDiego");
				}
			}else{
				var result=HDMA.common.getCommonFolderPath(req, {
						googleAnalytics:CONFIG_GEOVIEWER.googleAnalytics || null,
						area:topic[area].area
					});


				if(CONFIG_GEOVIEWER){
					result.commonPath="common";
					result.jsPath="common/js";
					result.cssPath="common/css";
					result.hostPath="";
				}

				if(callback){callback(result);}
			}
		}
	},



	//check api token status
	checkStatus: function(req, res){

		//over twitter limit?
		Output.twitter_locations.get("application/rate_limit_status.json", {resources:"help,users,search,statuses,trends,lists,application"}, function(error, result, response){
			//res.end(JSON.stringify({error:error, result:result, response:response}))
			res.end(JSON.stringify(result))
		})

	},


	//save
	update:function(obj, callback){
		obj.type=obj.type || null;
		obj.username=obj.username || null;
		obj.token=obj.token || null;
		obj.value=obj.value || null;

		var output={"status":"error", msg:"no username, token, type, or value. Please check again"};

		if(obj.type&&obj.username&&obj.token&&obj.value){
			HDMA.mongodb.query(Output.mongodb, "userProfile",{username:obj.username, token:obj.token},{}, function(err, results){
				if(!err&&results&&results.length>0){
					var user=results[0];
					user.bookmarks=user.bookmarks || [];

					switch(obj.type){
						case "bookmark":
							var value=obj.value,
								isExisted=false;

							for(var i=0,len=user.bookmarks.length; i<len; i++){
								if(user.bookmarks[i].name==value.name){
									output={status:"exist", msg:"The bookmark name, '"+value.name+"', is already existed. Please change another name and try again!"}
									isExisted=true;
									break;
								}
							}


							if(value&&value.name&&value.name!=""&&!isExisted){
								user.bookmarks.push(value)

								HDMA.mongodb.update(Output.mongodb, "userProfile", {username:obj.username}, {"$set":{bookmarks:user.bookmarks}}, function(err, r){
									if(err){
										output.msg=err
									}else{
										output={status:"ok",msg:r, value:user.bookmarks}
									}
									if(callback){callback(output)}
								})
							}else{
								if(callback){callback(output)}
							}
						break;
						case "bookmark-remove":
							var value=obj.value,
								removed=false;

							for(var i=0,len=user.bookmarks.length; i<len; i++){
								if(user.bookmarks[i].name==value.name){
									test=user.bookmarks.splice(i,1);
									removed=true
									break;
								}
							}

							output={status:"error", msg:"The bookmark name, '"+value.name+"', cannot be found! Please check again"}

							if(removed){
								//update into db
								HDMA.mongodb.update(Output.mongodb, "userProfile", {username:obj.username}, {"$set":{bookmarks:user.bookmarks}}, function(err, r){
									if(err){
										output.msg=err
									}else{
										output={status:"ok",msg:r, value:user.bookmarks}
									}
									if(callback){callback(output)}
								})
							}else{
								if(callback){callback(output)}
							}


						break;
						case "tag":
							var value=obj.value;

							if(value&&value.id_str&&value.level&&value.sentiment&&value.region&&value.topic){
								var note=value.note || {},
									note_geoviewer=user.note_geoviewer || {};

								note_geoviewer[value.id_str]=note_geoviewer[value.id_str] || {}
								note_geoviewer[value.id_str][value.topic]={
									level:value.level,
									tags:value.tags || "",
									sentiment:value.sentiment,
									username:obj.username,
									dateTime:MOMENT().toDate(),
									topic:value.topic
								}

								//if the user is in the topic
								if(user.topics.indexOf(value.topic)!=-1 || user.groups.indexOf("admin")){
									//update db
									HDMA.mongodb.update(Output.mongodb, "userProfile", {username: obj.username}, {"$set":{note_geoviewer:note_geoviewer}}, function(err, r){
										if(err){
											output.msg=err
										}else{
											output={status:"ok", msg:r, value:note_geoviewer[value.id_str]}

											//update cache!!!!!!! otherwise other users may not see the note if the tweet is in the cache!
											//not sure if this is a goood idea if there are too many request to update cache
											/**
											if(obj.updateCache){
												var key=value.region.toLowerCase();
												if(key=='san diego region'){key='sandiego'}
												var cacheTweets=Output.cacheTweets[key], t;

												//logger
												LOGGER.info("****************************************")
												LOGGER.info("Neet to update cache=Output.cacheTweets["+key+"]");

												if(cacheTweets){
													LOGGER.info("Start to search tweet (id_str='"+value.id_str+"' in Output.cacheTweets["+key+"]");

													for(var i=0, len=cacheTweets.length; i<len; i++){
														t=cacheTweets[i];

														if(t.id_str==value.id_str){
															cacheTweets[i].note=note;

															LOGGER.info("Found it at "+i+" >> maybe time consuming!!!")
															LOGGER.info("Updated!!!")

															break;
														}
													}
												}
											}
											*/
										}
										if(callback){callback(output)}
									});

								}else{
									output.msg="the user: "+obj.username+" is not belonged to the topic ("+value.topic+")";
									if(callback){callback(output)}
								}
							}else{
								if(callback){callback(output)}
							}
						break;
					}

				}else{
					output.msg=err
					if(callback){callback(output)}
				}
			});
		}else{
			if(callback){callback(output)}
		}


	}

}
