var HDMA=require('../hdma'),
    HDMA_COMMON=HDMA.common;



//FACTORY
module.exports=function(){
  return new Layer();
}


//CLASS
var Layer=function(){
  //properties

}



//layer
Layer.prototype.layer=function(req, res){
	var type=req.params.type || null,
		name=req.params.name || null,
		output={status:"ERROR", msg:"There is no type or name to request a layer. Please check again", value:null};

	if(type&&name){
		switch(type){
			case "nws":
				switch(name){
					case "cap":
						var url="",
							url_us="http://alerts.weather.gov/cap/us.php",
							url_area="http://alerts.weather.gov/cap/wwaatmget.php", //?x=CAC073&y=0
							parser=require('xml2json'),
							request=require('request'),
							x=req.query.x || "0",
							y=req.query.y || "0",
							f=req.query.f || "json"

						url=url_area;
						if(x=="0"&&y=="0"){url=url_us}

						//params
						url=url+"?x="+x+"&y="+y;

						//request
						request(url, function (error, response, body) {
							if (!error && response.statusCode == 200) {
							var json=parser.toJson(body);

							switch(f){
								case "json":
									res.end(json)
								break;
								case "geojson":
								case "shp":
								case "kml":
									json=JSON.parse(json)
									var entry=json.feed.entry,
										geojson={
											type:"FeatureCollection",
											features:[]
										};


									if(entry instanceof Object && !entry.length){
										var out=parseJson(entry)
										if(out){geojson.features.push(out)}
									}else{
										if(entry instanceof Array){
											entry.forEach(function(item, i){
												var out=parseJson(item);
												if(out){geojson.features.push(out)}
											})
										}
									}


									//output
									switch(f){
										case "geojson":
											res.end(JSON.stringify(geojson)); return;
										break;
										case "shp":
											//convert geojson to shp
											var fileName=type+"-"+name+"_"+x+"_"+y;
											HDMA.format.geojsonToShp(geojson, "public/temp/"+fileName+".zip", function(){
												res.redirect(HDMA_COMMON.getHostPath(req)+"/temp/"+fileName+".zip");
											})
										break;
										case "kml":
											//convert geojson to shp
											var fileName=type+"-"+name+"_"+x+"_"+y;
											HDMA.format.geojsonToKml(geojson, "public/temp/"+fileName+".kml", function(e, data){
												if(e){res.end(JSON.stringify(e)); return}

												res.redirect(HDMA_COMMON.getHostPath(req)+"/temp/"+fileName+".kml");
											})
										break;
									}


									//parse each entry to convert to feature
									function parseJson(entry){
										var polygon=entry["cap:polygon"],
											feature=null;

										//polygon exists
										if(polygon&&polygon!=""&&!(polygon instanceof Object)){
											polygon=polygon.split(" ");
											var coordinates=[polygon.map(function(coords){coords=coords.split(","); return [parseFloat(coords[1]), parseFloat(coords[0])]})];

											feature={
												type:"Feature",
												geometry:{
													type:"Polygon",
													coordinates: coordinates
												},
												properties:(function(){
													var out={}, feed=json.feed;
													for(var k in feed){
														if(k!='entry'){out[k]=feed[k]}
													}
													for(var k in entry){
														out['entry-'+k]=entry[k]
													}
													return out
												})()
											};
										}
										return feature
									}
								break;
							}

							}
						})
					break;
				}
			break;
		}





	}
}
