var FS=require("fs"),
		HASHTABLE=require('jshashtable'),
		EXTEND=require('util')._extend,
		$=require("cheerio"),
		LOGGER=require("../../config/LOGGER.js"),
		HDMA_COMMON=require("./hdma.common")(),
		HDMA_MONGODB=require("./hdma.mongodb")();



//FACTORY
module.exports=function(){
  return new Data();
}


//CLASS
var Data=function(){
  //properties
}



//getTweet
Data.prototype.getTweet=function(req, res, mongodb, nodeOptions){
		if(!mongodb){res.end('hdma.data.getTweet: no mongodb'); return; }

		nodeOptions=nodeOptions || {};
		nodeOptions.callback=nodeOptions.callback || null;
		nodeOptions.forEach=nodeOptions.forEach || null;
		nodeOptions.checkToken=nodeOptions.checkToken || false;


		var xlsStream="",distinctCache=new HASHTABLE();
		var params=HDMA_COMMON.parseURL(req),
			queryParams=params.getMongodbQueryParams(),
			query=queryParams.params,
			options=queryParams.options,
			removeDuplicate=params.getValue('removeDuplicate'),
			excel=params.getValue('excel'),
			keywords=params.getValue('keywords'),
			cities=params.getValue('cities'),
			source=params.getValue('source'),
			removeRT=params.getValue('removeRT'),
			removeURL=params.getValue('removeURL'),
			format=params.getValue('format'),
			jscallback=params.getValue('jscallback'),
			topic=params.getValue('topic'),
			limit=params.getValue('limit'),
			machineLearning=params.getValue('machineLearning'),
			token=params.getValue("token"),
			startDate=params.getValue('startDate'),
			endDate=params.getValue('endDate'),
			bbox=params.getValue('bbox')
			texts=params.getValue('texts'),
			searchArea=params.getValue('searchArea'),
			searchRegion=params.getValue('searchRegion'),
			canvasType=params.getValue('canvasType'),
			canvasHeight=params.getValue('canvasHeight'),
			canvasWidth=params.getValue('canvasWidth'),
			heatmapRadius=params.getValue('heatmapRadius')
			canvasObj=null;


		//file name for excel or png
		var filename="["+topic+"]"+((keywords)?keywords.split(",").join("_") :((texts)?texts.replace(/\s+/g,"_"):"allKeywords")) + ((cities)?"@"+cities.split(",").join("_") :((searchRegion&&searchRegion!="")?("@"+searchRegion.replace(/\ /gi,"_")):"@AllCities")) + ((bbox)?("["+bbox.map(function(v){return v.toFixed(1)}).join("_")+"]") :"") + ((startDate)?("("+startDate.replace(/\-/gi,"")+"-"+((endDate)?endDate.replace(/\-/gi,""):"")+")"):"") + ((removeRT>0&&removeRT!='false')?"_removeRT#"+removeRT:"") + ((removeURL>0&&removeURL!='false')?"_removeURL#"+removeURL:"") +((machineLearning)?"_machineLearning#True":"");
		filename=filename.substring(0,199);

		//canvas obj
		if(canvasType){
			canvasType=canvasType.toUpperCase();
			if(canvasType&&bbox&&bbox.length==4){
				canvasObj=new HDMA_COMMON.canvasImage({canvasWidth:canvasWidth, canvasHeight:canvasHeight, heatmapRadius: heatmapRadius, bbox:bbox, type:canvasType})

				//if HDMA_COMMON.canvasImage return only {}, that means it didnot import CANVAS and HEATMAP modeuls.
				if(Object.keys(canvasObj).length==0){
					canvasObj=null;
					var err={error:"haven't install HEATMAP and CANVAS modules"};
					if(nodeOptions.callback){
						nodeOptions.callback(err, req.query)
					}else{
						res.json(err);
					}
					return;
				}
			}
		}

		options["onEachTweet"]=function(t, num){
			var output=t,
				isDuplicate=false;

			//this may make performance slow!!!!!!!!!!!!!!1111
			if(removeDuplicate&&removeDuplicate=='true'){
				//key=t.user.id+"--!@#$--"+t.text
				key=t.user.id+"::"+t.text.substring(0,20)+"@"+t.text.length
				if(!distinctCache.containsKey(key)){
					distinctCache.put(key, true)
				}else{
					isDuplicate=true;
				}
			}

			if((format=='excel' || excel=='true')&&!isDuplicate){
				formatTweetXLS(t, keywords || texts, cities, num); //output will be in xlsStream
				output=null;
			}

			//canvas
			if(!isDuplicate&&canvasObj){
				var coords=t.coordinates;
				if(t&&coords&&coords.coordinates){
					canvasObj.addLatLng(coords.coordinates[1], coords.coordinates[0])
					//output=null;
				}
			}

			return output
		}

		//overwirte options onEachTweet
		if(nodeOptions.forEach){
			options['onEachTweet']=nodeOptions.forEach
		}


		//check topic
		if(topic.indexOf("archive_")!=-1){
			source="twitterArchive"
		}

		//check source
		switch(source){
			case "search":
				source="twitterSearchDB"
			break;
			case "streaming":
				source="twitterStreamingDB"
				delete query["search_info.topics"]

				//if no searchArea
				if(!searchArea || searchArea==""){
					delete query["search_info.search_areas.name"]
				}

				//if search region == sandiego >> change to San Diego region
				if(searchRegion&&searchRegion.toLowerCase()=="sandiego"){
					query["search_region"]="San Diego region"
				}

			break;
			case "twitterArchive":
				source="twitterArchive"
			break;
			default:
				res.end(JSON.stringify({error:"source is neither 'search' nor 'streaming'."}))
				return;
			break;
		}

		//limit && batchSize
		if(limit&&limit>10000){
			options['batchSize']=limit
		}

		//sort options
		options["sort"]={"created_at_local":-1}


		//check token >> temporally not check
		if(nodeOptions.checkToken){
			token="375d9690af0163335865871a46118884";
			if(token&&token!=""){

				//check token
				HDMA_MONGODB.query(mongodb, "userProfile", {token: token}, null, function(err, users){
					if(err){LOGGER.info(err); res.end(JSON.stringify({error:err})); return; }

					//if token is not match
					if(users.length==0){
						err="token is not match. Please check again or contact administrator."
						LOGGER.info(err); res.end(JSON.stringify({error:err})); return;
					}

					//query
					runQuery();
				});
			}
		}else{
			runQuery();
		}


		//query
		function runQuery(){
			//enforce query by a specific index
			if(query["search_info.topics"]&&source=='twitterSearchDB'&&cities!='none'){
				options.hint={"search_info.topics":1, "created_at_local":-1}

				if(query["text"]&&query["text"]["$all"]){
					options.hint={"search_info.topics":1, "text":1}
				}
			}

			//if format=html/map, just do query with limit=1 to pass the results to template map html.
			//it is because it will be trigger in the client side to get map width and height
			if(format=="html/map"){options.limit=1}



			//query mongodb
			HDMA_MONGODB.query(mongodb, source, query, options, function(err, results){
				if(err){LOGGER.info(err); res.end(JSON.stringify({error:err})); return; }

				//clear distinctCache
				distinctCache=new HASHTABLE();

				//parse results
				if((excel=='true' || format=='excel')&&xlsStream!=""){
					//res
					//res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
					res.setHeader("Content-Type", "application/vnd.ms-excel;charset=utf-8,");
					//res.setHeader('Content-Type',"text/csv;charset=utf-8,%EF%BB%BF")
					res.setHeader("Content-Disposition", "attachment; filename="+filename+".xls");
					//the xlsStream has been pushed in options.onEachTweet
					res.end(xlsStream);
					return;
				}

				//heatmap or point canvas
				if(canvasObj){
					//draw result
					canvasObj.draw();

					//if format==image/png, directly output image
					if(format=='image/png'){
						res.type("png");
						res.end(canvasObj.canvas.toBuffer());
						return;
					}


					//if format=html/map, output image as file
					/**
					if(format=='html/map'){
						HDMA_MONGODB.writeFileSync("cache/canvas/"+filename+".png", canvasObj.canvas.toBuffer())
					}
					*/
				}



				var output=null
				if(results){
						output=results;

						if(format=='geojson'){
							output={
								type:"FeatureCollection",
								features:[]
							};
							var feature;

							results.forEach(function(result, i){
								feature={
									type:"Feature",
									properties:result,
									geometry:{
										type:"Point",
										coordinates:[]
									}
								}

								if(result.coordinates&&result.coordinates.coordinates&&result.coordinates.coordinates.length==2){
									feature.geometry=result.coordinates;
									output.features.push(feature)
								}
							});
						}
				}

				//output
				if(output){
					if(nodeOptions.callback){
						nodeOptions.callback(output, req.query)
					}else{
						if(jscallback){
							res.end(jscallback+"("+JSON.stringify(output)+")")
						}else{
							res.end(JSON.stringify(output))
						}
					}
				}




			});

		}//end query



		//formatTweetstoXLS
		function formatTweetXLS(t, keyword, city, num){
			var objs=[],
				obj_template={
					geocode_type:"NULL",
					"is_valid_only_for_Flu":"False",
					language:"NULL",
					source:"NULL",
					in_reply_to_status_id:"NULL",
					to_user_name:"NULL",
					geo:"NULL",
					time_zone:"NULL",
					statuses_count:0,
					friends_count:0,
					followers_count:0,
					retweet_count:0,
					is_retweet:false,
					//mentions:"NULL",
					hashtags:"NULL",
					urls:"NULL",
					location:"NULL",
					from_user_name:"NULL",
					from_user:"NULL",
					text:"NULL",
					created_at_local:"NULL",
					created_at:"NULL",
					city:city || ((t.search_info.search_areas[0])?t.search_info.search_areas.map(function(k){return k.name}).join(", "):null),
					keyword:keyword || (t.search_info&&t.search_info.keywords)?t.search_info.keywords.join(", "):"NULL",
					tweet_id:"NULL"
				};

			//tweets.forEach(function(t,i){
				var obj=EXTEND({}, obj_template);

				//tweet id
				obj["tweet_id"]=String(t.id)

				//text
				if(t.text){obj["text"]=t.text}

				//created_at
				if(t.created_at){obj["created_at"]=t.created_at.toISOString().split(".")[0].replace("T"," ")}

				//create at local
				if(t.created_at_local){obj["created_at_local"]=t.created_at_local.toISOString().split(".")[0].replace("T"," ")}

				//urls
				if(t.entities&&t.entities.urls&&t.entities.urls.length>0){if(typeof(t.entities.urls[0])==='object'){var urls=[]; t.entities.urls.forEach(function(u){urls.push(u.url)}); obj["urls"]=urls.join(", ");}else{obj["urls"]=t.entities.urls.join(", ")}}

				//mentions
				//if(t.entities&&t.entities.user_mentions&&t.entities.user_mentions.length>0){obj["mentions"]=t.entities.user_mentions.join(", ")}

				//hashtags
				if(t.entities&&t.entities.hashtags&&t.entities.hashtags.length>0){if(typeof(t.entities.hashtags[0])==='object'){var hashtags=[]; t.entities.hashtags.forEach(function(u){hashtags.push(u.text)}); obj["hashtags"]=hashtags.join(", ");}else{obj["hashtags"]=t.entities.hashtags.join(", ")}}

				//search_ares
				//if(t.search_info&&t.search_info.search_areas&&t.search_info.search_areas.length>0){obj['search_areas']=t.search_info.search_areas.map(function(v){return v.name}).join(", ")}

				//time zone
				if(t.user&&t.user.time_zone){obj['time_zone']=t.user.time_zone}

				//is_retweet
				if(t.retweeted_id){obj['is_retweet']=true}

				//retweet count
				if(t.retweet_count>0){obj["retweet_count"]=t.retweet_count}

				//retweeted id
				//if(t.retweeted_id&&t.retweeted_id!=''){obj["retweeted_id"]=t.retweeted_id}

				//followers_count
				if(t.user&&t.user.followers_count){obj['followers_count']=t.user.followers_count}

				//firends count
				if(t.user&&t.user.friends_count){obj["friends_count"]=t.user.friends_count}

				//status count
				if(t.user&&t.user.statuses_count>=0){obj["statuses_count"]=t.user.statuses_count}

				//location
				if(t.user&&t.user.location){obj["location"]=t.user.location}

				//language
				if(t.lang){obj["language"]=t.lang}

				//from user
				if(t.user&&t.user.screen_name){obj["from_user"]=t.user.screen_name}

				//from user name
				if(t.user&&t.user.name){obj["from_user_name"]=t.user.name}

				//geo
				if(t.coordinates&&t.coordinates.coordinates){obj["geo"]=t.coordinates.coordinates.join(", ")}

				//source
				if(t.source){obj["source"]=$(t.source).text()}

				//chris adding this...hopefully it doesnt break the code
				if(t.is_valid) {
					obj['is_valid_only_for_Flu'] = t.is_valid;
				}

				//geocode type
				if(t.geocoded&&t.geocoded.status){
					var st=t.geocoded.status;
					if(st=='GPS tweet'){obj['geocode_type']='GPS'}
					if(st=='success'){obj['geocode_type']='userProfile'}
				}

				//objs.push(obj)

				//push data to excelData
				var keys=Object.keys(obj);
				if(num==0){
					//header
					keys.forEach(function(k,i){xlsStream+=k.toUpperCase()+((i==keys.length-1)?"":"\t")})
					xlsStream+='\n';
				}
				keys.forEach(function(k,i){xlsStream+=String(obj[k]).trim().replace(/(?:\r\n|\r|\n|\t)/g, " ")+((i==keys.length-1)?"":"\t")})
				xlsStream+="\n";

			//});

			//return objs
			return obj
		}
}


//get streaming keywords
Data.prototype.getKeyword=function(req, res, mongodb){
		var params={},
			type=req.params.type || "all";

		switch (type){
			case "streaming":
				//if request keyword
				if(req.query.keyword&&req.query.keyword!=""){
					params["keyword"]=req.query.keyword;
				}

				//limit to filterparameter=track
				params["filterParameter"]="location"

				if(mongodb){
					//query  mongodb
					HDMA_MONGODB.query(mongodb, "streamingTopics", params, {}, function(err, results){
						if(err){LOGGER.error("[ERROR] hdma.data.getStreamingKeyword: "+ err); res.end(json.stringify(err)); return;}

						if(results&&results.length>0){
							var output={"streamingAPI":[]};
							results.forEach(function(obj, i){
								output.streamingAPI.push({
									keyword:obj.keyword,
									startDate:(obj.startDate)?obj.startDate.toISOString():null,
									endDate:(obj.endDate)?obj.endDate.toISOString():null,
									bbox:(obj.bbox)?obj.bbox:null,
									host:(obj.host)?obj.host:null,
									area:(obj.area)?obj.area:null
								})
							})

							res.end(JSON.stringify(output));
						}
					});
				}else{
					res.end("[ERROR] hdma.data.getStreamingKeyword: no mongodb");
				}
			break;

			case "all":
				if(mongodb){
					//get searchAPI db first
					HDMA_MONGODB.query(mongodb, "topics", {}, {}, function(err, results){
						if(err){LOGGER.error("[ERROR] hdma.data.getKeyword in DB[twitterSearchDB]: "+ err); res.end(json.stringify(err)); return;}

						if(results&&results.length>0){
							var output={"searchAPI": [], "streamingAPI": []};

							results.forEach(function(obj, i){
								output.searchAPI.push({
									topic:obj.name,
									keyword:obj.keywords.map(function(o){return o.name}),
									startDate:(obj.startDate)?obj.startDate.toISOString():null,
									endDate:(obj.endDate)?obj.endDate.toISOString():null,
									searchAreas:(obj.searchAreas&&obj.searchAreas.length>0)?obj.searchAreas.length:false,
									hasTwitterSearchBoundary:obj.hasTwitterSearchBoundary
								})
							})

							//get streaming keywords
							HDMA_MONGODB.query(mongodb, "streamingTopics", {}, {}, function(err, data){
								if(err){LOGGER.error("[ERROR] hdma.data.getKeyword in DB[streamingKeywords]: "+ err); res.end(json.stringify(err)); return;}

								if(data&&data.length>0){
									data.forEach(function(obj, i){
										output.streamingAPI.push({
											topic:obj.filterParameter,
											keyword:(obj.filterParameter=="track")?obj.keyword:obj.area,
											startDate:(obj.startDate)?obj.startDate.toISOString():null,
											endDate:(obj.endDate)?obj.endDate.toISOString():null,
											bbox:(obj.bbox)?obj.bbox:null,
											host:(obj.host)?obj.host:null
										})
									})

									res.end(JSON.stringify(output));
								}

							});
						}

					});

				}

			break;

		}


}


//get topic
Data.prototype.getTopic=function(req, res, mongodb){
		if(mongodb){
			var topicName=req.params.topic || null;

			if(topicName&&topicName!=""){
				//params
				var params={"name": topicName.toLowerCase()};

				if(topicName=='all'){
					params={}
				}

				//query topic in the mongodb
				HDMA_MONGODB.query(mongodb, "topics", params, null, function(err, results){
					if(err){LOGGER.error("[ERROR] getTopic: "+ err); res.end(json.stringify(err)); return;}

					if(results&&results.length>0){
						var output=[];
						results.forEach(function(topic, i){
							output.push({
								name:topic.name,
								keywords:topic.keywords,
								startDate:(topic.startDate)?topic.startDate.toISOString():null,
								endDate:(topic.endDate)?topic.endDate.toISOString():null,
								cities:(topic.searchAreas)?topic.searchAreas:null
							})
						})

						res.end(JSON.stringify(output));
					}
				});
			}
		}else{
			res.end('[ERROR]: hdma.data.getTopic: no mongodb')
		}

}


//get layers
Data.prototype.getLayer=function(req, res, mongodb){
		var topic=req.params.topic;

		if(topic&&topic!=""){
			topic=topic.replace("--","+")

			if(topic=='sandiego'){topic='sanDiego'}

			//query topic in the mongodb
			HDMA_MONGODB.query(mongodb, "layers", {topics:topic}, null, function(err, results){
				if(!err){
					res.end(JSON.stringify(results))
				}
			});
		}
}
