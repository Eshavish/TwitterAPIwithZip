var app={
	map:null,
	initCenterLatLng :[32.915, -116.8],
	initZoom:10,
	socket:io.connect("/socket-geoviewer",{resource:"hdma/socket/socket.io"}),
	layer:{
		streaming:{
			markerCluster:null,
			heatmap:null
		},
		search:{
			markerCluster:null,
			heatmap:null,
			markerGroup:null
		},
		queryRectangle:null
	},
	popup:null,
	maxTweetNum:100, 
	drawHandler:null,
	control:{
		draw:null
	},
	user:null,
	icon:{
		getActive:function(type){
			type=type || ".icon-active";
			var $iconDefault=$("#mapPopup_markerGroup img"+type),
				src=$iconDefault.attr("src"),
				width=$iconDefault.attr("markerwidth"),
				height=$iconDefault.attr("markerheight");
								
				return new L.icon({
					iconUrl : src,
					iconSize : [width, height], //[12.5, 21],
					iconAnchor : [width / 2, height / 2]// [6.25, 10.5]
				});
		}
	},
	geomask:{
		enable:true,
		meter:100
	}, 
	streaming:{
		filter:{
			keywords:null,
			onlyImage:false,
			typingTimer:null,         //timer identifier
			doneTypingInterval:1000  //time in ms, 2 second for example
		},
		tweets:[],
		num:0,
		$tweetList:$("#sidebar-streamingList ul.streamingList"),
		$streamingBadge:$("#sidebar-streamingList span#streaming-filter-badge"),
		$streamingTabs:$('ul#streaming-tabs')
	},
	search:{
		results:null
	},
	heatmap:{
		radius:2000,
		max:5,
		slider:null
	},
	reloadTwitterWidgetInteval:null, 
	basemaps : {
		//"Light map": L.tileLayer("https://tiles.mapbox.com/v3/pathgeo.map-jwxvdo36/{z}/{x}/{y}.png?updated=1374825292888",{attribution:"Map Provided by <a href='http://www.mapbox.com/' target='_blank'>MapBox</a>", title:"Light Map"}),
		//"Terrain map": L.tileLayer("https://tiles.mapbox.com/v3/pathgeo.map-9p1ubd74/{z}/{x}/{y}.png?updated=1374825095067",{attribution:"Map Provided by <a href='http://www.mapbox.com/' target='_blank'>MapBox</a>", title:"Terrain Map"}),
		//"Night map": L.tileLayer("https://tiles.mapbox.com/v3/pathgeo.map-jkiqueqj/{z}/{x}/{y}.png?updated=1374825942470",{attribution:"Map Provided by <a href='http://www.mapbox.com/' target='_blank'>MapBox</a>", title:"Night Map"}),
		"Light Gray Background Map" : L.tileLayer("http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/{styleId}/256/{z}/{x}/{y}.png", {
			styleId : 22677,
			attribution : "Map Provided by <a href='http://cloudmade.com/' target='_blank'>Cloudmade</a>",
			title : "Cloudmade"
		}),
		"OpenStreet Map" : L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
			attribution : "Map Provided by <a href='http://www.openstreetmap.org/' target='_blank'>Open Street Map</a>",
			title : "Open Street Map",
			maxZoom:19
		}),
		"ESRI Imagery Map" : L.layerGroup([
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "World_Imagery",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Imagery Map"
			}),
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "Reference/World_Boundaries_and_Places",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Imagery Map"
			})
		]),
		"ESRI Street Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "World_Street_Map",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Street Map"
		}),
		"ESRI National Geographic Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "NatGeo_World_Map",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI National Geographic Map",
			maxZoom:16
		}),
		"ESRI Terrain Map" : L.layerGroup([
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "World_Terrain_Base",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Terrain Map",
				maxZoom:13
			}),
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "Reference/World_Reference_Overlay",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Terrain Map",
				maxZoom:13
			}),
		]),
		"ESRI Topographic Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "World_Topo_Map",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Topographic Map"
		}),
		"ESRI Light Gray Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "Canvas/World_Light_Gray_Base",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Light Gray Map",
			maxZoom:16
		}),
		"ESRI Ocean Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "Ocean_Basemap",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Ocean Map",
			maxZoom:12
		})
		//"Google Streetmap":L.tileLayer("https://mts{s}.googleapis.com/vt?lyrs=m@207265067&src=apiv3&hl=zh-TW&x={x}&y={y}&z={z}&s=Ga&style=api%7Csmartmaps",{subdomains:"123", attribution:"Map Source from Google"})
	}
}



//init
$(document).ready(function(){
	init.ui()
	init.map()
	init.socket();

	$("#loading").hide();

});



//init ui
var init={
	ui: function(){
		//sidebar-menu
		$("#sidebar-menu > ul > li > a").click(function(){
			var $this=$(this),
				target=$this.attr('data-target'),
				layerType={
					"#sidebar-streamingList":{id:"streaming", action: function(){$(".leaflet-control-mapGallery li[title='Showing markers']").hide();}},
					"#sidebar-search":{id: "search", action: function(){$(".leaflet-control-mapGallery li[title='Showing markers']").show(); }}
				};
			
			//close popup
			if(app.popup){
				app.map.closePopup(app.popup)
				app.popup=null;
			}
			
			if(target&&target!=''){
				//show target
				$("#sidebar .panel").hide();
				
				$(target).show();

				var obj=layerType[target];
				if(obj){
					run.switchLayer(obj.id);
					obj.action();
				}
			}
			
		})
		
		
		//search button keydown event
		$("#search-keyword").keydown(function(e){
			if(e.keyCode==13){
				return false;
			}
		})
		
		//geolocation input click event
		$(".search-geolocation.click").click(function(e){
			if(app.drawHandler&&app.drawHandler.enabled()){app.drawHandler.disable();}
			if(app.layer.queryRectangle){app.map.removeLayer(app.layer.queryRectangle); app.layer.queryRectangle=null;}
			
			app.drawHandler=new L.Draw.Rectangle(app.map, app.control.draw.options.rectangle)
			app.drawHandler.enable();
		});
		
		//search button
		$("#search-btn").click(function(){
			//run spatial query
			run.spatialQuery()
		})
		$("#search-keyword").keydown(function(e){
			if(e.keyCode==13){run.spatialQuery()}
		})
		
		//search start and end data
		var mStartDate=moment("2014-12-06","YYYY-MM-DD"),
			mToday=moment(),
			dateFormat="YYYY-MM-DD";
		$("#search-startDate").attr({
			"placeHolder": mStartDate.format(dateFormat),
			"value":mStartDate.format(dateFormat)
		});
		$("#search-endDate").attr({
			"placeHolder": mToday.format(dateFormat),
			"value":mToday.format(dateFormat)
		})
		
		//datepicker
		$(".datepicker").datepicker({
			format:"yyyy-mm-dd",
			todayBtn:"linked",
			endDate:new Date(),
			startDate:new Date(2014,11,6)
		});
		
		//twitter stremaing filter
		$('#streaming-tabs li').click(function(){
			var $this=$(this),
				$a=$this.find("a"),
				onlyImage=$a.attr('data-onlyImage'),
				keywords=$('#streaming-filter').val() || null;
			
			onlyImage=(onlyImage&&onlyImage=="true")?true:false;

			show.streamingFilterResult(keywords, onlyImage)
		});
		$('#streaming-filter').keyup(function(){
			var filter=app.streaming.filter;
	
			clearTimeout(filter.typingTimer);
			

			//show loading
			$('#streaming-filter-loading').show();
				
			filter.typingTimer = setTimeout(function(){
				var onlyImage=$('#streaming-tabs li.active > a').attr('data-onlyImage'),
					keywords=$('#streaming-filter').val() || null;
				
				onlyImage=(onlyImage&&onlyImage=="true")?true:false;
				show.streamingFilterResult(keywords, onlyImage);
				//hide loading 
				$('#streaming-filter-loading').hide();
			}, filter.doneTypingInterval);
			
		});
		
		
		
		//search tabs event
		$("#search-tabs li").click(function(){
			var $this=$(this),
				onlyImage=$this.find("a").attr("data-onlyImage") || false,
				$badge=$this.find("span.badge");
			
			onlyImage=(onlyImage&&onlyImage=='true')?true:false;
			
			//show loading
			$this.find("img.tabs-loading").show();
			
			//clearLayers
			run.clearLayers(app.layer.search)
				
			var $li=$("#sidebar-search ul.searchList").find(" > li").hide().removeClass('imageMode'),
				$select=$li.filter(function(){
					var $that=$(this),
						isValid=run.filterTweet(null, {keywords:null, onlyImage:onlyImage, $target:$that}),
						tweet=$that.data('tweet');
					
					//show tweet
					if(isValid&&tweet){
						//only show markers on the map
						if(tweet){show.tweet(tweet, null, {$target:"none", targetLayer:app.layer.search})}
					}
					
					return isValid;
				}).show();
				
			if(onlyImage){$select.addClass('imageMode')}
			
			$("#search-tabs span.badge").hide();
			$badge.html($select.length).show();
			
			//hide loading
			$("img.tabs-loading").hide();

		});
		
		
		//show popup on the map while clicking on a.showMarker
		$("ul.streamingList, ul.cacheStreamingList, ul.searchList").on("click", "> li a.showMarker", function(){
			var $this=$(this),
				$li=$this.parents("li.tweetBox"),
				data=$li.data('tweet');
				lat=parseFloat($this.attr('data-lat')),
				lng=parseFloat($this.attr('data-lng'));
				//html=$this.parents('blockquote').find('p.e-entry-title').html();
			
				if(data){
					//show popup on the map
					app.popup=new L.popup({offset: new L.point(0,0)}).setLatLng(new L.latLng(lat, lng)).setContent(data.hdma.popupHtml);
					app.map.openPopup(app.popup)
				}
			
				
		});
		
		
		//click event for mapPopupWidget markerGroup
		$("#mapPopup_markerGroup .mapPopupWidget_content ul li").click(function() {
			var $img = $(this).find("img"), img_src = $img.attr("src"), width = $img.attr("markerWidth"), height = $img.attr("markerHeight");
			
			//change marker icon
			run.changeMarkerIcon(img_src, width, height);
			
			//add icon-default
			$(this).siblings().find('img').removeClass('icon-active');
			$img.addClass('icon-active')
		});

		
		//when mouse click on otherplace, hide dataTable_menu
		$(document).mouseup(function(e) {
			var $container = $(".mapPopupWidget,#basemapWidget");
			if (!$container.is(e.target) && $container.has(e.target).length === 0) {
				$container.hide();
			}
		});
		
		//mapPopupWidget
		$(".mapPopupWidget").on({
			mouseover : function() {

			},
			mouseleave : function() {
				$(".mapPopupWidget").hide();
			}
		})
		
		//boostrap-slider for heatmap
		app.heatmap.slider=$("#heatmap_slider").slider({
			min:500,
			max:5500,
			step: (5500-500)/100,
			value: app.heatmap.radius,
			enabled:false
		}).on({
			"slideStop": function(e){
				//clear heatmap layer
				var layer=app.layer.search.heatmap;
				
				layer.changeRadius(parseInt(e.value)/111000)
				//layer.setData({radius:parseInt(e.value)/111000})
				//if(layer._heatmap){
					//layer._heatmap.repaint();
				//}
				
			}
		
		})
		
		//login
		$("#btn-login").click(function(){
			$("#popupLogin").modal({})
		});
		$("#formLogin").submit(function(e){
			var $this=$(this),
				username=$this.find("#formUsername").val() || "",
				password=$this.find("#formPassword").val() || "",
				rememberme=$this.find(".icheckbox_minimal").hasClass('checked');
			
			//show loading
			$("#loginLoading").show();
			$("#loginMsg").hide();
			
			if(username&&username!=""&&password&&password!=""){
				app.socket.emit("login", {username:username, password:$.md5(password)}, function(result){
					run.afterLogin(result)
				})
			}
			
			e.preventDefault();
		})
		
		
		//popover
		$("[data-toggle='popover']").popover();
		
		//show loading modal
		$("#popupLoadCache").modal("show")
		
	},
	
	//socket
	socket: function(){
		app.socket.on("connected", function(data){
			console.log(data)

			if(data&&data.cache&&data.cache.length>0){
				var num=0 ,isValid;
				$.each(data.cache.reverse(), function(i,t){
					t=run.createHDMA(t, "streaming");
					isValid=run.filterTweet(t,{onlyImage:false});

					show.tweet(t, i, {isVisible:isValid.toString()});
					if(isValid){num++}
				})
				app.streaming.$streamingBadge.html(num);
			}
			
			//hide modal
			$("#popupLoadCache").modal("hide")
		})
		
		//only retun gps tweet (filter in the nodejs geoviewer.js)
		app.socket.on("newTweet", function(t){
			//if(app.streaming.num>20){return;}
		
			//create hdma obj
			//only gps-tweeet
			if(t.coordinates&&t.coordinates.coordinates.length==2){
				t=run.createHDMA(t, "streaming");
			
				//check filter
				var isValid=run.filterTweet(t),
					$li=show.tweet(t, app.streaming.num, {isVisible:isValid.toString()}),
					onlyImage=app.streaming.$streamingTabs.find('li.active > a').attr('data-onlyImage');
				
				app.streaming.num++;

				//image mode
				if(onlyImage=='true'){$li.addClass('imageMode')};
				
				if(isValid){
					var showNum=parseInt(app.streaming.$streamingBadge.html())+1;
					app.streaming.$streamingBadge.html(showNum)	
				}

				
				//reset app.streaming.tweets
				if(app.streaming.num!=0&&app.streaming.num%app.maxTweetNum==0){
					//delete old 100 tweets
					var half=app.maxTweetNum/2;
					//app.streaming.tweets=app.streaming.tweets.splice(0,half);
					app.streaming.$tweetList.find('> li').slice(half).remove();
					
					//clear layers >> keep collecting and showing tweets on the map
					//run.clearLayers(app.layer.streaming)
					console.log('over app.maxTweetnum='+app.maxTweetNum, 'app.streaming.tweets.length='+app.streaming.tweets.length);
				}
			}
			
		});
		

		
	},
	
	//map
	map: function(){		
		app.map = L.map("map", {
		  zoom: app.initZoom,
		  center: app.initCenterLatLng,
		  layers: [app.basemaps["ESRI National Geographic Map"]],
		  zoomControl: false,
		  attributionControl: false
		});

		//set up current basemap
		app.map.currentBasemap=app.basemaps["ESRI National Geographic Map"];
		
		
		//heatlayer and clusterlayer
		app.layer.streaming.heatmap = run.createHeatmapLayer({visible:true})//.addTo(app.map);
		app.map.addLayer(app.layer.streaming.heatmap)
		app.layer.search.heatmap = run.createHeatmapLayer({visible:true});

		//clusterlayer
		app.layer.streaming.markerCluster=run.createMarkerClusterLayer({visible:true, showKeywordCount:false}).addTo(app.map)
		app.layer.search.markerCluster=run.createMarkerClusterLayer();
		
		//marker group
		app.layer.search.markerGroup=new L.featureGroup();
		app.layer.search.markerGroup.options={visible:true, layerType:"markerGroup"};
		
		
		//zoom control
		var zoomControl = L.control.zoom({
		  position: "bottomright"
		}).addTo(app.map);

		
		//Initialise the draw control and pass it the FeatureGroup of editable layers
		app.control.draw = new L.Control.Draw({
			draw:{
				polyline:false,
				polygon:false,
				circle:false,
				marker:false,
				retangle:{
					shapeOptions:{}
				}
			}
		})//.addTo(app.map);
		
		
		
		//map events
		app.map.on({
			"draw:created":	function(e){
				var layer;
				
				if(e.layerType=='rectangle'){
					app.layer.queryRectangle=layer=e.layer.addTo(app.map)
					
					//show coordiantes
					$("#search-geolocation").val(parse.layerToBBOX(layer).join(", "));
					
					//do spatial query
					run.spatialQuery();
				}
		
			}
		});
		
		
		
		//controls
		var controls={
			mapGallery : L.Control.extend({
				options : {
					"collapsed" : true,
					"position" : 'topright',
					"text" : 'Map Gallery'
				},
				initialize : function(options) {
					L.Util.setOptions(this, options);
				},
				onAdd : function(map) {
					// create the control container with a particular class name
					var container = L.DomUtil.create('div', 'leaflet-control-mapGallery');
					var html = "<ul>"+
								"<li title='Showing markers' layer='markerGroup' style='display:none;'><img src='images/marker-icon.png' /></li>"+
								"<li title='Cluster Map' layer='markerCluster' style='background-color:#3071A9'><img src='images/gallery-cluster.png' /></li>"+
								"<li title='Hotspots' layer='heatmap' style='background-color:#3071A9'><img src='images/gallery-heatmap.png' /></li>"+
							   "</ul>";


					//click map gallery event
					$(container).html(html).find("ul > li").on({
						click : function() {
							var $this = $(this), 
								value = $this.attr("layer"), 
								activePanelID=$(".sidebar-wrapper .panel:visible").attr("id"),
								layerType = {
									"sidebar-streamingList":"streaming",
									"sidebar-search":"search"
								},
								layer;
							
							if(layerType[activePanelID]){
								layer=app.layer[layerType[activePanelID]][value]
							}
							
							//if this layer is already shown on the map, hide the layer and change the color
							if(layer){
								if (layer.options.visible) {	
									app.map.removeLayer(layer)
							
		//							app.map.removeLayer(layer);
									$this.css({"background-color" : ''});
									
									layer.options.visible=false;
								} else {
									app.map.addLayer(layer)
									//layer.addTo(app.map)
								
									//make the markerclusterlayer more priority
									if(value=='markerCluster'){
										layer.bringToFront();
										layer.on("clusterclick", run.clusterClickHandler);
									}
									
									$this.css({"background-color" : "#3071A9"});

									layer.options.visible=true;
								}
							}
							
						},
						mouseover : function() {
							$(".mapPopupWidget, #basemapWidget").hide();
							var $this = $(this), value = $this.attr("layer"), 
								activePanelID=$(".sidebar-wrapper .panel:visible").attr("id"),
								layerType = {
									"sidebar-streamingList":"streaming",
									"sidebar-search":"search"
								},
								layer;
							
							if(layerType[activePanelID]){
								layer=app.layer[layerType[activePanelID]][value]
							}

							//only the layer is activated
							if (layer.options.visible&&layerType[activePanelID]=='search') {
								//show map popup window
								$("#mapPopup_" + value).show();
							}
						},
						mouseleave : function() {

						}
					});
					return container
				}
			}),
			tocThumbnail: L.Control.extend({
				options : {
					"position" : 'topright',
					"text" : 'Change Base Maps'
				},
				initialize : function(options) {L.Util.setOptions(this, options);},
				onAdd : function(map) {
					//create div element
					var mainContent=L.DomUtil.create('div', 'leaflet-control-tocThumbnail'),
						html="<a class='leaflet-control-layers-toggle' href='#' title='Layers'></a>"+ $("#basemapWidget")[0].outerHTML;
					
					$(mainContent).html(html)
						.addClass('leaflet-control-layers')
						.on({
							"mouseover":mouseoverEvent,
							"click": mouseoverEvent
						})
						.find("ul li").click(function(){
							switchBaseLayer($(this).attr('title'));
						});

					//monuseoverEvent on the basemapWidget
					function mouseoverEvent(e){
						$("#basemapWidget").show().on({
							"mouseleave":function(){
								$(this).hide();
							}
						});
					}
					
					return mainContent;
				}
			})
		}
	
		//add map gallery control
		$.each(controls, function(k,v){
			app.map.addControl(new v());
		})
		
		/* GPS enabled geolocation control set to follow the user's location */
		var locateControl = L.control.locate({
		  position: "bottomright",
		  drawCircle: true,
		  follow: true,
		  setView: true,
		  keepCurrentZoomLevel: true,
		  markerStyle: {
			weight: 1,
			opacity: 0.8,
			fillOpacity: 0.8
		  },
		  circleStyle: {
			weight: 1,
			clickable: false
		  },
		  icon: "icon-direction",
		  metric: false,
		  strings: {
			title: "My location",
			popup: "You are within {distance} {unit} from this point",
			outsideMapBoundsMsg: "You seem located outside the boundaries of the map"
		  },
		  locateOptions: {
			maxZoom: 18,
			watch: true,
			enableHighAccuracy: true,
			maximumAge: 10000,
			timeout: 10000
		  }
		}).addTo(app.map);

		
		//table of content
		/* Larger screens get expanded layer control and visible sidebar */
		/**
		if (document.body.clientWidth <= 767) {
		  var isCollapsed = true;
		} else {
		  var isCollapsed = false;
		}

		var baseLayers = {
		  "Street Map": mapquestOSM,
		  "Aerial Imagery": mapquestOAM,
		  "Imagery with Streets": mapquestHYB
		};

		var groupedOverlays = {
		  "Points of Interest": {
			"<img src='assets/img/theater.png' width='24' height='28'>&nbsp;Theaters": null,
			"<img src='assets/img/museum.png' width='24' height='28'>&nbsp;Museums": null
		  },
		  "Reference": {
			"Boroughs": null,
			"Subway Lines": null
		  }
		};

		var layerControl = L.control.groupedLayers(baseLayers, groupedOverlays, {
		  collapsed: isCollapsed
		}).addTo(app.map);
		*/
	}
}


function readTopic(json){
	if(!json || $.isEmptyObject(json)){console.log("NO JSON for the topic"); $("#popupTopic").modal({keyboard:false, backdrop:'static'}); return; }
	
	console.log(json)
}




//show
var show={
	tweet: function(t, num, options){
		//console.log(t);
		//options
		if(!options){options={}}
		options.$target=options.$target || app.streaming.$tweetList;
		options.targetLayer=options.targetLayer || app.layer.streaming; 
		options.isVisible=options.isVisible || "true";
		
		var sourceType=(options.targetLayer==app.layer.streaming)?"streaming":"search";
	
		//if tweet is gps-tweet
		if(t){
			var obj=t.hdma;
			/**
			//if t contains hdma object >> directly read from t.hdma
			if(t.hdma){
				obj=t.hdma
			}else{
				//only gps-tweeet
				if(t.coordinates&&t.coordinates.coordinates.length==2){
					t=run.createHDMA(t, sourceType)
					obj=t.hdma
				}
			}
			*/
			//show marker
			if(obj&&obj.marker){
				if(options.isVisible=='true'){
					//cluster layer
					options.targetLayer.markerCluster.addLayer(obj.marker);
						
					//heatmap
					options.targetLayer.heatmap.addData({lat:((app.geomask.enable)?obj.latlng_geomasking.lat: lat), lng:((app.geomask.enable)?obj.latlng_geomasking.lng:lng),value:1})
					
					//marker group
					if(sourceType=='search'){
						options.targetLayer.markerGroup.addLayer(obj.marker);
					}
				}
				
				
				//show tweet in the list
				if(options.$target&&options.$target!='none'&&num>=0){
					var html=obj.widgetHtml || show.generateTweetListHtml(t),
						$li=$("<li class='tweetBox' data-tweetID='"+t.id_str+"' data-num='"+num+"' data-sourceType='"+sourceType+"' data-hasMedia='"+obj.hasMedia+"' style='display:"+((options.isVisible=='true')?"block":"none")+"'>"+html+"</li>");
						
						//cache widgetHtml into t.hdma
						if(!obj.widgetHtml){obj.widgetHtml=html;}
						$li.data("tweet", t);
					
					//options.$target.prepend();
					options.$target.prepend($li)
					
					return $li;
				}
			}
				
		}//end if(t)
	
	},
	
	//show tweet content in the list
	generateTweetListHtml: function(t, options){
		//options
		if(!options){options={}}
		options.twitterWidget=options.twitterWidget || false;
		
		
		var html="",
			tweetID=t.id_str,
			entities=t.entities,
			user=t.user,
			created_at=t.created_at,
			m_createdAt=moment(created_at),
			dateFormat="hh:mm A - DD MMM YYYY",
			datetime=m_createdAt.format(dateFormat) ,//|| m_createdAt.twitterLong(),
			text=run.linkify(t.text),
			latlng_geomasking=t.hdma.latlng_geomasking || {lat:0, lng:0},
			coordinates=(app.geomask.enable)?[latlng_geomasking.lng, latlng_geomasking.lat]:t.coordinates.coordinates,
			media='',
			size;
			
			
		if(entities&&entities.media&&entities.media.length>0){
			$.each(entities.media, function(i,m){
				switch(m.type){
					case "photo":
						size=m.sizes.small;
						media+="<a class='photo-link box-"+i+"' target='_blank' href='"+m.expanded_url+"' data=scribe='element:photo'><img class='autosized-media' data-srcset='"+""+"' data-crop-x='0' data-crop-y='21' data-image-index='0' alt='View image on Twitter' title='View image on Twitter' data-width='"+size.w+"' data-height='"+size.h+"' src='"+m.media_url+"' width='"+size.w+"' height='"+size.h+"'></a>";
					break;
				}
			})
		}

		//console.log(t)
		
		//create widget manually
		html='<div class="twitter-tweet twitter-tweet-rendered" title="Embedded Tweet" >'+
				'<div class="root standalone-tweet ltr twitter-tweet not-touch">'+
					'<blockquote class="tweet subject expanded h-entry" data-tweet-id="'+tweetID+'" cite="https://twitter.com/'+user.screen_name+'/status/'+tweetID+'" >'+
						(function(){
							if(media!=""){
								//'<a class="photo-link  box-0" target="_blank" href="http://twitter.com/Salvie_Lozano/status/545092123335225344/photo/1" data-scribe="element:photo"><img class="autosized-media" data-srcset="https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FB5COZQRCQAApsvl.jpg%3Alarge 1024w,https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FB5COZQRCQAApsvl.jpg 600w,https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FB5COZQRCQAApsvl.jpg%3Asmall 340w" data-crop-x="0" data-crop-y="21" data-image-index="0" alt="View image on Twitter" title="View image on Twitter" data-width="600" data-height="600" src="https://pbs.twimg.com/media/B5COZQRCQAApsvl.jpg:small" width="251" height="251"></a>'+
								return '<div class="cards-base cards-multimedia customisable-border" data-scribe="component:card" >'+
											'<div class="media">'+media+'</div>'+
									   '</div>'
							}else{
								return ""
							}
						})()+
						'<div class="header">'+
							'<div class="h-card p-author" data-scribe="component:author">'+
								'<a class="u-url profile" target="_blank" href="https://twitter.com/"'+user.screen_name+'" aria-label="'+user.name+' (screen name: '+user.screen_name+')" data-scribe="element:user_link">'+
									'<img class="u-photo avatar" alt="" src="'+user.profile_image_url_https+'" data-scribe="element:avatar">'+
									'<span class="full-name"><span class="p-name customisable-highlight" data-scribe="element:name">'+user.name+'</span></span>'+
									'<span class="p-nickname" dir="ltr" data-scribe="element:screen_name">@<b>'+user.screen_name+'</b></span>'+
								'</a>'+
							'</div>'+
							'<a class="follow-button profile" target="_blank" href="https://twitter.com/'+user.screen_name+'" role="button" data-scribe="component:followbutton" title="Follow '+user.name+' on Twitter"><i class="ic-button-bird"></i>Follow</a>'+
						'</div>'+
						'<div class="content e-entry-content" data-scribe="component:tweet">'+
							'<p class="e-entry-title">'+text+'</p>'+
							'<div class="dateline collapsible-container">'+
								'<a class="u-url customisable-highlight long-permalink" target="_blank" href="https://twitter.com/'+user.screen_name+'/status/'+tweetID+'" data-datetime="'+created_at+'" data-scribe="element:full_timestamp"><time class="dt-updated" datetime="'+created_at+'" title="Time posted: '+created_at+'">'+datetime+'</time></a>'+
								'<span class="p-geo" data-collapsed-class="collapse-geo" title="Posted from '+t.place.full_name+'"><i class="ic-geo ic-mask"></i><b>'+t.place.full_name+'</b></span>'+
							'</div>'+
						'</div>'+
						'<div class="footer customisable-border" data-scribe="component:footer">'+
							'<ul class="tweet-actions" role="menu" aria-label="Tweet actions" data-scribe="component:actions">'+
								'<li><a class="showMarker" data-tweetID="'+tweetID+'" data-lat="'+coordinates[1]+'" data-lng="'+coordinates[0]+'" ><i class="ic-geo ic-mask"></i><b>Show Location</b></a></li>'+
								'<li><a href="https://twitter.com/intent/tweet?in_reply_to='+tweetID+'" class="reply-action web-intent" title="Reply" data-scribe="element:reply"><i class="ic-reply ic-mask"></i><b>Reply</b></a></li>'+
								'<li><a href="https://twitter.com/intent/retweet?tweet_id='+tweetID+'" class="retweet-action web-intent" title="Retweet" data-scribe="element:retweet"><i class="ic-retweet ic-mask"></i><b>Retweet</b></a></li>'+
								'<li><a href="https://twitter.com/intent/favorite?tweet_id='+tweetID+'" class="favorite-action web-intent" title="Favorite" data-scribe="element:favorite"><i class="ic-fav ic-mask"></i><b>Favorite</b></a></li>'+
							'</ul>'+
						'</div>'+
					'</blockquote>'+
				'</div>'+
			 '</div>';
		
		
		
		//use twttr.widgets.load or create
		if(options.twitterWidget){
			html="<blockquote class='twitter-tweet'>&mdash; "+user.name+" (@"+user.screen_name+") "+
				   "<a href='https://twitter.com/"+user.screen_name+"/status/"+tweetID+"'>"+moment(parseInt(t.timestamp_ms)).format("MMMM D, YYYY") +"</a>"+
				 "</blockquote>";
		}
		
		
		
		return html;
	},
	
	//show filter streaming result
	streamingFilterResult: function(keywords, onlyImage){
		//clearLayers
		run.clearLayers(app.layer.streaming)
	
		
		//set keywords into global variable
		var filter=app.streaming.filter;
		filter.keywords=keywords;
		
		//set onlyImage
		filter.onlyImage=onlyImage;
		
		
		var $li=app.streaming.$tweetList.find(" > li").hide().removeClass('imageMode'),
			firstID=parseInt($li.last().attr("data-num")),
			$select=$li.filter(function(){
				var $this=$(this),
					isValid=run.filterTweet(null, {keywords:keywords, onlyImage:onlyImage, $target:$this}),
					tweet=$this.data('tweet');
				
				//console.log(isValid)
				
				//show tweet
				if(isValid&&tweet){
					var id=parseInt($this.attr('data-num'))-firstID;
						//t=app.streaming.tweets[id];
				
					//only show markers on the map
					if(tweet){show.tweet(tweet, null, {$target:"none"})}
				}
					
				return isValid;
			}).show();
			
			if(onlyImage){$select.addClass('imageMode');}
			
		app.streaming.$streamingBadge.html($select.length);


		//try twitter search
		/**
		app.socket.emit("twitterSearch", {q:keywords}, function(err, results){
			if(err){console.log("[ERROR] twitterSearch: no results"); return; }
			
			if(results&&results.statuses.length>0){
				console.log(results)
			}
		})
		*/
		
		//load cached tweets
		/**
		var isValid;
		$.each(app.streaming.tweets, function(i,t){
			if(run.filterTweet(t, {keywords:keywords, onlyImage:onlyImage})){
				show.tweet(t, i, {$target:$cacheStreamingList})
				
				number++;
			}
		})
		*/
		
		 

	},
	
	
	//show spatial query results
	spatialQueryResult: function(results){
		var filterByImage=$("ul#search-tabs >li.active >a").attr('data-onlyImage');
		filterByImage=(filterByImage=='true')?true:false;
		
		//clear the number of results in the badge
		$("#search-tabs span.badge").html("")
		$("#sidebar-search ul.searchList").html("")
	
		//clear all layers on the map
		run.clearLayers(app.layer.search);

		//parse results
		if(results&&results.length>0){
			//remove draw rectangle
			app.map.removeLayer(app.layer.queryRectangle)
			
			//hide loading icon
			$(".search-msg").html("")
			
			//enable slider
			app.heatmap.slider.slider("enable");
			
			var number=0;

			//show tweets
			$("#sidebar-search .table .list").html("");
			//$.each(results.reverse(), function(i,t){
			for(var i=0, reverse=results.reverse(), length=reverse.length; i<length; i++){
				var t=run.createHDMA(reverse[i], 'search'),
					isVisible=run.filterTweet(t, {keywords:null, onlyImage:filterByImage});
				
				var $li=show.tweet(t, i, {$target:$("#sidebar-search ul.searchList"), targetLayer:app.layer.search, isVisible:isVisible.toString()})
				
				if(isVisible){number++}
				
				if(filterByImage){$li.addClass('imageMode')}
			}//)
			
			//show the number of results in the badge
			//need to wait until the active tab finishes switching 
			setTimeout(function(){
				$("#search-tabs li.active span.badge").html(number)
				//hide loading
				$("img.tabs-loading").hide();
			},10)
			
			
			

		}else{
			$(".search-msg").html("Found 0 results.<br>Please search again by other criteria")
		}
		
	},
	
	
	//show hightlight keyword
	highlightKeyword: function(keyword){
		console.log(keyword)
	
	}
	
	

}


var run={
	//linkify
	linkify: function(text){
		return text.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&\?\/.=]+/, function(m) {
			return "<a href='"+m+"' target='_blank'>"+m+"</a>";
		}).replace(/[@#]\w+/g,function(b,c){
			c="twitter.com/";
			//return b.link("//"+(b[a="search"]("#")?c:a+"."+c+a+"?q=")+b)
			return "<a href='"+("http://"+(b[a="search"]("#")?c:a+"."+c+a+"?q=")+b)+"' target='_blank'>"+b+"</a>";
		});
	},
	
	//create hdma object
	createHDMA: function(t, sourceType){
		sourceType=sourceType || "streaming";
	
		if(t.coordinates&&t.coordinates.coordinates.length==2){
			var coordinates=t.coordinates,
				lat=coordinates.coordinates[1],
				lng=coordinates.coordinates[0];
					
			obj={
				popupHtml:run.createMarkerPopupHtml(t),
				latlng:new L.latLng(lat, lng),
				marker:null,
				latlng_geomasking:new L.latLng(run.geomask(lat, app.geomask.meter), run.geomask(lng, app.geomask.meter)),
				hasMedia:(t.entities&&t.entities.media&&t.entities.media.length>0)?true:false
			};
					
			obj.marker=new L.marker((app.geomask.enable)?obj.latlng_geomasking:obj.latlng).bindPopup(obj.popupHtml).setIcon(app.icon.getActive((sourceType=='search')?".search-default":null));
			obj.marker.hdma={
				tweetText:t.text,
				latlng_geomasking:obj.latlng_geomasking
			}
			
			t.hdma=obj
			
			return t
		}
	},
	
	//spatial search
	spatialQuery: function(){
		//clear all layers on the map
		run.clearLayers(app.layer.search);
		
		//clear msg
		var $msg=$(".search-msg");
		$msg.html("");
		
		//get params
		var params={
			keywords:null,
			bbox:null,
			startDate:null,
			endDate:null,
			onlyImage:false
		}
		
		//keyword
		params.keywords=run.parseSearchTerm($("#search-keyword").val());

		//if(!keyword || keyword==""){console.log("[ERROR] spaitalQuery: no search keyword."); $msg.html("Please input a keyword"); return; }

		//check boundary
		if(!app.layer.queryRectangle){
			var defaultBound=[[32.534180,-117.595898],[33.507161,-115.835742]];
			app.layer.queryRectangle=new L.rectangle(defaultBound);
			/**
			console.log("[ERROR] spatialQuery: no app.layer.queryRectangle"); 
			$msg.html("Please input a geolocation"); 
			return;
			*/
		}
		
		//get start and end date
		params.startDate=$("#search-startDate").val() || null;
		params.endDate=$("#search-endDate").val() || null;
		
		//get options 
		params.onlyImage=$("#search-chkImage").is(':checked');
		
		//get bbox of rectangle
		params.bbox=parse.layerToBBOX(app.layer.queryRectangle);

		//show loading
		$msg.html("<img src='images/loading.gif' />")
		
		//send query params by socket
		app.socket.emit("spatialQuery", params, function(results){
			app.search.results=results;
			show.spatialQueryResult(results);
		});
		
		
	},
	
	//parse keyword to match the requirement of text search in mongodb
	//use ',' for multiple keywords and "-" for negative keyword
	parseSearchTerm:function(term){
		if(term&&String(term).trim()!=""){
			return term.split(',').map(function(k){
				k=String(k).trim();
				
				//check if k is a phrase, contains blank " ". e.g. san diego
				//if(k.split(" ").length>1){k="\""+k+"\""}
				
				//check if a hyphen is there to do negative search
				if(k.substring(0,1)=='-'){
					var rest=k.substring(1,k.length);
					if(rest.split(' ').length>1){rest="\""+rest+"\""}
					k="-"+rest
				}else{
					//make k as phrase to do text search in mongodb
					//e.g. san diego, fire >> "san diego" "fire" to do AND logical search
					k="\""+k+"\"";
				}
				
				return k
			}).join(" ");
		}
	},

	
	//filter tweet
	filterTweet: function(t, options){
		var filter=app.streaming.filter,
			isValid=true;
			
		//options
		if(!options){options={}}
		options.keywords=options.keywords || filter.keywords;
		options.onlyImage=options.onlyImage || filter.onlyImage;
		options.$target=options.$target || null;
	
		
		//filter by image
		if(options.$target){ //filter by each li
			isValid=(options.$target.attr('data-hasMedia')==options.onlyImage.toString())?true:false;
		}else{
			//from streaming tweets or search results
			if(t&&t.hdma&&t.hdma.hasMedia!=options.onlyImage){
				isValid=false;
			}
		}
		
		
		//filter by keyword
		if(options.keywords&&options.keywords!=""&&isValid){
			//var keywords=options.keywords.split(",").map(function(k){return "(^|\\s+)"+k.toLowerCase()+"(\\s+|$)"}).join("|");
			var isExclude=false,
				keywords=options.keywords.split(",").map(function(k){
					k=String(k).trim();
				
					if(k.substring(0,1)=='-'){
						//exclude keyword
						isExclude=true;
						
						//var excludes=k.substring(k.lastIndexOf("(")+1, k.lastIndexOf(")")).split("|").map(function(v){return "(^|\\s+)"+String(v).trim()+"($|\\s+)"}).join("|");
						var excludes="(^|\\s+)"+k.substring(1,k.length)+"($|\\s+)";
						return "((?!("+excludes+")).)"
					}else{
						return "(?=.*?((^|\\s+)"+k.toLowerCase()+"($|\\s+)))";
					}
				}).join("");
			//keywords=new RegExp(keywords, "gi")
			keywords=new RegExp("^"+keywords+((!isExclude)?".":"")+"*$", "gi")
			
			//console.log(keywords)
			
			//filter text 
			if(t&&t.text&&t.text.length>0){
				if(!t.text.toLowerCase().match(keywords)){
					isValid=false;
				}
			}else{
				if(options.$target){
					isValid=keywords.test(options.$target.find("p.e-entry-title").text());
				}
			}
		}
		
		return isValid;
	},
	
	
	//clear all layers on the map
	clearLayers: function(targetLayer){
		if(targetLayer){
			//remove layer
			//cluster layer
			if(targetLayer.markerCluster){targetLayer.markerCluster.clearLayers();}
			
			//heatmap
			if(targetLayer.heatmap){
				
				targetLayer.heatmap.setData({data:[]})
				if(targetLayer.heatmap._heatmap){
					targetLayer.heatmap._heatmap.repaint();
				}
				//app.map.removeLayer(targetLayer.heatmap)
				
				/**
				
				//reset heatmap
				//app.layer.heatmap._reset()
				var visible=targetLayer.heatmap.options.visible
				targetLayer.heatmap=run.createHeatmapLayer({visible:visible})
				if(visible){targetLayer.heatmap.addTo(app.map)}
				*/
			}
			
			if(targetLayer.markerGroup){
				targetLayer.markerGroup.clearLayers();
			}
			
		}
	},
	
	//switch layers: app.layer.streaming or app.layer.search
	switchLayer: function(type){
		if(type&&type!=""){
			//hide all layers first
			$.each(app.layer, function(k,v){
				if(k=='streaming' || k=='search'){
					$.each(v, function(o,layer){
						if(layer&&layer._map){
							app.map.removeLayer(layer)
						}
					});
				}
			})
			
			//show target layers
			if(app.layer[type]){
				$.each(app.layer[type], function(k,v){
					if(v){
						//highlight icon in the leaflet-control-mapGallery 
						//and show on the map depending on its options.visible
						var layerType=v.options.layerType;
						if(layerType&&layerType!=""){
							var $icon=$(".leaflet-control-mapGallery li[layer='"+layerType+"']");
							if($icon.length>0){
								$icon.css({"background-color":""})
								if(v.options.visible){$icon.css({"background-color":"#3071A9"}); app.map.addLayer(v);}
							}
						}
					}
				})
			}
			
		}
		
	},
	
	//create heatmap layer
	createHeatmapLayer: function(options){
		//options
		if(!options){options={}}
		options.visible=options.visible || false;
		options.radius=options.radius || parseInt(app.heatmap.radius)/111000; 
		options.scaleRadius=true
		options.useLocalExtrema=false;
		options.maxOpacity=.8;
	
		
		//create heatmap layer
		var layer=new HeatmapOverlay(options)
		layer._max=app.heatmap.max;
		
		//var layer=L.heatLayer([], {radius: options.radius, max:1});
		
		if(layer.options){
			layer.options.visible=options.visible
			layer.options.layerType='heatmap'
		}else{
			layer.options={
				visible:options.visible,
				layerType:'heatmap'
			}
		}
		
		return layer
	},
	
	
	//create markerCluster layer
	createMarkerClusterLayer: function(options){
		//options
		if(!options){options={}}
		options.visible=options.visible || false;
		options.showKeywordCount=options.showKeywordCount || false;
		
		var layer=hdma.layer.markerCluster(null,{
			iconCreateFunction: function (cluster) {
			
				//get top keywords
				var topKeywords=run.getTopKeywords(cluster.getAllChildMarkers()),
					topKeyword=topKeywords.map(function(o,i){return "<li><a href='#' onclick='show.highlightKeyword(\""+o.keyword+"\")'>"+o.keyword+((options.showKeywordCount)?(" ("+o.count+")"):"")+"</a></li>"}).join("")
				
				
				var childCount = cluster.getChildCount();

				var c = ' marker-cluster-';
				if (childCount < 10) {
					c += 'small';
				} else if (childCount < 100) {
					c += 'medium';
				} else {
					c += 'large';
				}
		
				return new L.DivIcon({ html: '<div><span>' + childCount + '<ul>'+topKeyword+'</ul></span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });
			}
		},{
				//clusterclick event
				clusterclick : run.clusterClickHandler
		});
		layer.options.visible=options.visible;
		layer.options.layerType='markerCluster'
		
		return layer;
	},
	
	
	getTopKeywords: function(markers, options){
		//options
		if(!options){options={}}
		options.top=options.top || 3;
		
		var text="";
		$.each(markers, function(i,m){
			if(m.hdma.tweetText){
				text+=m.hdma.tweetText+" ";
			}
		})
		
		//using underscore.js to get word frequency
		//remove a tag and other characters
		text=text.replace(/\<a.*?\<\/a\>/g, "").replace(/[^a-zA-Z\@\#]/g,' ').split(" ");
		var results=_.chain(text)
		  .without('',' ','and','then','it','It','In', 'And', 'not', 'am', 'do', 'go', 'pm', 'me', 'so', 'at','amp','gt', 'my', 'blank', 'target', 'but', 'href', "it's", "co", "isn't", "don't", "very", "here", "there", "also", "us", "are", "they", "from", "your", "new", "about", "will","by", "now","more", "than", "dr", "you're", "we", "what", "get","or", 'the','to','a','an','of','for','as','i','with','it','is','on','that','this','can','in','be','has','if', 'have', 'has', 'http', 'https', 'rt', 'you')
		  .reject(function(w){ return w.length==1})  //remove only containing one character
		  .groupBy(function(word){return word;})
		  .sortBy(function(word){ return -word.length; })
		  .value();

		return results.splice(0,options.top).map(function(w){return {keyword:w[0], count:w.length}})	
	},
	
	
	//cluster click event
	clusterClickHandler:function(e){
		if(e.layer && e.layer._childCount){
			//console.log(e.layer)
			
		}
	},
	
	
	//create marker popup html
	createMarkerPopupHtml: function(tweet){
		var html="<div class='marker-popup'>",
			text=tweet.text,
			time=tweet.created_at_local,
			m_time=moment(time).add(8, "hours"),  //<<<need to fix!!! need to consider daylight saving time!
			screen_name=tweet.user.screen_name.replace(/\_/g, " "),
			account=tweet.user.name,
			img=tweet.user.profile_image_url;
			
		html+="<div class='author'><img class='profile-image' src='"+img+"' /><span class='fullname'>"+screen_name+"</span><span class='account-name'>"+account+"</span></div>"+
			  "<div class='content'><p class='text'>"+text+"</p><span class='time'>"+m_time.format("hh:mm A - DD MMM YYYY")+"</span></div>"+
			  "</div>";
		
		return html;	
	},
	
	
	//geomasking
	geomask: function(value, meter){
		var random=Math.random()*2-1
		return parseFloat(value)+((random*meter)/100000)
	},
	
	
	//change marker icon
	changeMarkerIcon: function(img_src, width, height) {
		var icon = new L.icon({
			iconUrl : img_src,
			iconSize : [width, height], //[12.5, 21],
			iconAnchor : [width / 2, height / 2]// [6.25, 10.5]
		});

		var iconHover = new L.icon({
			iconUrl : (function() {
				if(img_src.split("bullet").length>1){
					return "images/marker/1374590745_bullet-red.png"
				}else{
					return "images/marker/Magenta/5.png"
					//return "images/1374595382_marker_rounded_red.png"
				}

			})(),
			iconSize : [width, height], //[12.5, 21],
			iconAnchor : [width / 2, height / 2]// [6.25, 10.5]
		});

		

		$.each(app.layer.search.markerGroup.getLayers(), function(k, marker) {
			marker.setIcon(icon);
			marker.options.iconDefault = icon;
			marker.options.iconHover = iconHover;
		})
		
			
	},
	
	
	//after login
	afterLogin: function(result){
		$("#loginLoading").hide();
		
		if(result&&result.status=='ok'){
			//cache user
			app.user=result;
			//show username
			$("#navbar-toolbar #username").html(result.username);
			$("#navbar-toolbar #btn-login").off('click').click(function(){run.logout();}).find("span").html("Log out")
			
			
			$("#download-btn").off('click').click(function(){
				if(result.downloadURL){
					var url=result.downloadURL,
						texts=$("#search-keyword").val() || "",
						startDate=$("#search-startDate").val() || "",
						endDate=$("#search-endDate").val() || "",
						bbox=$("#search-geolocation").val() || "";
						
					url=url.replace("{texts}",texts).replace("{startDate}", startDate).replace("{endDate}", endDate).replace("{bbox}", bbox);
					window.open(url);
				}
			}).show();

			
			//hide login modal
			$("#popupLogin").modal("hide");
		}else{
			$("#loginMsg").html(result.msg).show();
		}
		
	},
	
	
	//log out
	logout: function(){
		app.user=null;
		
		$("#download-btn").off("click").hide();
		$("#navbar-toolbar #username").html("");
		$("#navbar-toolbar #btn-login").off("click").click(function(){
			$("#popupLogin").modal({})
		}).find("span").html("Log in")

	}
	
	
}


//parse data
var parse={
	layerToBBOX:function(layer){
		var bbox=[];
		
		layer._latlngs.map(function(obj,i){
			if(i==0 || i==2){  //get min and max latlng
				bbox.push(obj.lat)
				bbox.push(obj.lng)
			}
		})
		
		return bbox;
	}


}






//switch basemap
function switchBaseLayer(type){
	var layer = app.basemaps[type] || null,
		map=app.map;
	
	if(layer){
		if(app.map.currentBasemap){
			map.removeLayer(app.map.currentBasemap);
		}
		map.addLayer(layer);
		app.map.currentBasemap=layer;
		
		//fire baselayerchange event
		map.fire('baselayerchange', {layer: layer});
	}
}










/**
 * **********************************************************************************************************************************************************
 * need to revise
 * **********************************************************************************************************************************************************
 */



$(document).on("click", ".feature-row", function(e) {
  sidebarClick(parseInt($(this).attr('id')));
});

$("#about-btn").click(function() {
  $("#aboutModal").modal("show");
  return false;
});

$("#full-extent-btn").click(function() {
  app.map.fitBounds(boroughs.getBounds());
  return false;
});

$("#legend-btn").click(function() {
  $("#legendModal").modal("show");
  return false;
});

$("#login-btn").click(function() {
  $("#loginModal").modal("show");
  return false;
});

$("#list-btn").click(function() {
  $('#sidebar').toggle();
  app.map.invalidateSize();
  return false;
});

$("#nav-btn").click(function() {
  $(".navbar-collapse").collapse("toggle");
  return false;
});

$("#sidebar-toggle-btn").click(function() {
  $("#sidebar").toggle();
  app.map.invalidateSize();
  return false;
});

$("#sidebar-hide-btn").click(function() {
  $('#sidebar').hide();
  app.map.invalidateSize();
});









/**
//* Highlight search box text on click 
$("#searchbox").click(function () {
  $(this).select();
});

//* Typeahead search functionality 
$(document).one("ajaxStop", function () {
  

  //instantiate the typeahead UI 
  $("#searchbox").typeahead({
    minLength: 3,
    highlight: true,
    hint: false
  }).on("typeahead:selected", function (obj, datum) {
    
});
*/