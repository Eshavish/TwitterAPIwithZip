//use json in the cookie
$.cookie.json=true;


//global varible
var app={
		map:null,
	initCenterLatLng :[32.915, -116.8],
	initZoom:10,
	socket:io.connect("/socket-geoviewer",{resource:"hdma/socket/socket.io"}),
	layer:{
		markerCluster:null,
		heatmap:null,
		markerGroup:null,
		queryBoundary:null,
		maskCanvas:null
	},
	popup:null,
	maxTweetNum:100, 
	drawHandler:null,
	control:{
		draw:null
	},
	blacklists:["Longdickya9","vincenvi619","vme7413"],
	user:{},
	carouselOptions:{
		items : 5, //5 items above 1000px browser width
		itemsDesktop : [1199,4], //5 items between 1000px and 901px
		itemsDesktopSmall : [979,3], // betweem 900px and 601px
		itemsTablet: [768,2], //2 items between 600 and 0
		itemsMobile : false, // itemsMobile disabled - inherit from itemsTablet option
		pagination:false,
		rewindNav:false
	},
	icon:{
		getActive:function(type){
			type=type || ".icon-active";
			var $iconDefault=$("#mapPopup_markerGroup img"+type),
				src=$iconDefault.attr("src"),
				width=$iconDefault.attr("markerwidth"),
				height=$iconDefault.attr("markerheight");
								
				return new L.icon({
					iconUrl : src,
					iconSize : [width, height], //[12.5, 21],
					iconAnchor : [width / 2, height / 2]// [6.25, 10.5]
				});
		}
	},
	geomask:{
		enable:true,
		meter:100
	}, 
	filter:{},
	streaming:{
		num:0,
		$streamingBadge:$("ul.sidebar-menu span.badge"),
		$masonry:$("section#contentWall ul.streamingLis").masonry({columnWidth:200}),
		carouselData:null,
		$realtime_carousel:null
	},
	search:{
		results:null
	},
	heatmap:{
		radius:2000,
		max:5,
		slider:null
	},
	reloadTwitterWidgetInteval:null, 
	basemaps : {
		"Light Gray Background Map" : L.tileLayer("http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/{styleId}/256/{z}/{x}/{y}.png", {
			styleId : 22677,
			attribution : "Map Provided by <a href='http://cloudmade.com/' target='_blank'>Cloudmade</a>",
			title : "Cloudmade"
		}),
		"OpenStreet Map" : L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
			attribution : "Map Provided by <a href='http://www.openstreetmap.org/' target='_blank'>Open Street Map</a>",
			title : "Open Street Map",
			maxZoom:19
		}),
		"ESRI Imagery Map" : L.layerGroup([
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "World_Imagery",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Imagery Map"
			}),
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "Reference/World_Boundaries_and_Places",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Imagery Map"
			})
		]),
		"ESRI Street Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "World_Street_Map",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Street Map"
		}),
		"ESRI National Geographic Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "NatGeo_World_Map",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI National Geographic Map",
			maxZoom:16
		}),
		"ESRI Terrain Map" : L.layerGroup([
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "World_Terrain_Base",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Terrain Map",
				maxZoom:13
			}),
			L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
				serviceName: "Reference/World_Reference_Overlay",
				attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
				title : "ESRI Terrain Map",
				maxZoom:13
			}),
		]),
		"ESRI Topographic Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "World_Topo_Map",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Topographic Map"
		}),
		"ESRI Light Gray Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "Canvas/World_Light_Gray_Base",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Light Gray Map",
			maxZoom:16
		}),
		"ESRI Ocean Map" : L.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/{serviceName}/MapServer/tile/{z}/{y}/{x}", {
			serviceName: "Ocean_Basemap",
			attribution : "Map Provided by <a href='http://www.arcgis.com/' target='_blank'>ESRI</a>",
			title : "ESRI Ocean Map",
			maxZoom:12
		}),
		"NASA NightView Map" : L.tileLayer("https://earthbuilder.googleapis.com/10446176163891957399-13737975182519107424-4/2/maptile/maps?v=2&authToken=Cgjo9hMJn-uqFhDcgMGiBQ==&x={x}&y={y}&z={z}&s=", {
			serviceName: "Night_View_Map",
			attribution : "Map Provided by  NASA Earth Observatory/NOAA NGDC",
			title : "NASA NightView Map",
			maxZoom:15
		}),
		"Google Streetmap":L.tileLayer("https://mts{s}.googleapis.com/vt?lyrs=m@207265067&src=apiv3&hl=zh-TW&x={x}&y={y}&z={z}&s=Ga&style=api%7Csmartmaps",{subdomains:"123", attribution:"Map Source from Google"})
	}
}



//trigger when ready
$(function(){	
	//hide modal
	$("#popupLoadCache").modal("show")
	
	//ui
	init.ui();
	
	//init map
	init.map();

	//socket
	init.socket(); 
});




//init
var init={
	//ui
	ui:function(){
		//init login
		//this.login();
		

		//window resize
		$(window).on("resize", function(){
			$("section.content > div[id!='wall']").height($(window).height());// - $(".header").height());
			//$("#carousel_content").outerHeight($("#tweet_carousel").outerHeight());
			//app.map.invalidateSize();
		})
		
		//content height
		$("section.content > div[id!='wall']").height($(window).height());// - $(".header").height());
		$("#carousel_content").outerHeight($("#tweet_carousel").outerHeight());// - $("#carousel_toolbar").outerHeight())
		
		
		//privacy policy
		$(".popup-content").click(function(){
			var target=$(this).attr('data-target');
			if(target&&target!=''){
				$(target).modal({});
			}
		})
		
		
		//sidebar menu click event
		$(".sidebar-menu a.sectionSwitch").click(function(){
			var target=$(this).attr("data-target");
				
			//hide all content
			$("section.content").removeClass('content-active');
			$("section#"+target).addClass("content-active").find("> iframe").height($(window).height()-60).css({"width":"100%", "border":"0px"});
				
			//resize map
			if(target=='contentMap'){
				app.map.invalidateSize();
			}
		});
		
		//submenu
		$("ul.treeview-menu a.submenu").click(function(){
			var $this=$(this),
				target=$this.attr('data-target');
				
			switch(target){
				case "#tweet_carousel":
					if($(target).is(":visible")){
						run.resizeMap({height:"100%"}, {height:"0%"}, function(){
							$(target).toggle();
						});
					}else{
						$(target).toggle();
						run.resizeMap({height:"32.5%"}, {height:"67.5%"});
					}
				break;
			}
		});
		
		//geolocation input click event
		$(".search-geolocation.click").click(function(e){
			if(app.drawHandler&&app.drawHandler.enabled()){app.drawHandler.disable();}
			if(app.layer.queryBoundary){app.map.removeLayer(app.layer.queryBoundary); app.layer.queryBoundary=null;}
			
			app.drawHandler=new L.Draw.Polygon(app.map, app.control.draw.options.polygon)
			app.drawHandler.enable();
		});
		
		//search button
		$("#btn-search").click(function(){
			//run spatial query
			run.spatialQuery()
		})
		$("#btn-restore").click(function(){
			if(app.layer.queryBoundary){app.map.removeLayer(app.layer.queryBoundary); app.layer.queryBoundary=null;}
			$("#search-keyword, #search-startDate, #search-endDate, #search-geolocation").val("")
			run.spatialQuery()
		})
		$("#search-keyword").keydown(function(e){
			if(e.keyCode==13){run.spatialQuery()}
		})
		
		
		//search start and end data
		var mStartDate=moment("2014-12-06","YYYY-MM-DD"),
			mToday=moment(),
			dateFormat="YYYY-MM-DD";
		$("#search-startDate").attr({
			"placeHolder": "Only real-time tweets", //mStartDate.format(dateFormat),
			"value":"" //mStartDate.format(dateFormat)
		}).change(function(){
			$("#search-endDate").val("")
			if(this.value!=""){$("#search-endDate").val(mToday.format(dateFormat))}
		});
		$("#search-endDate").attr({
			"placeHolder": "Only real-time tweets",//mToday.format(dateFormat),
			"value":""//mToday.format(dateFormat)
		}).change(function(){
			$("#search-startDate").val("")
			if(this.value!=""){$("#search-startDate").val(mStartDate.format(dateFormat))}
		});
		
		
		
		
		//datepicker
		$(".datepicker").datepicker({
			format:"yyyy-mm-dd",
			todayBtn:"linked",
			endDate:new Date(),
			startDate:new Date(2014,11,6)
		});
		
		//boostrap-slider for heatmap
		app.heatmap.slider=$("#heatmap_slider").slider({
			min:500,
			max:5500,
			step: (5500-500)/100,
			value: app.heatmap.radius,
			enabled:false
		}).on({
			"slideStop": function(e){
				//clear heatmap layer
				var layer=app.layer.search.heatmap;
				
				layer.changeRadius(parseInt(e.value)/111000)
				//layer.setData({radius:parseInt(e.value)/111000})
				//if(layer._heatmap){
					//layer._heatmap.repaint();
				//}
				
			}
		
		})
		
		//owl carousel
		$("#carousel_content").on("click", "div.carousel-item", function(){
			var $this=$(this),
				tweet=$this.data('tweet');
			
			if(tweet&&tweet.hdma){
				var obj=tweet.hdma;
				app.popup=obj.marker.getPopup().setLatLng(obj.marker.getLatLng());
				//app.popup.options.autoPan=true;
				app.popup.openOn(app.map)
				console.log(tweet)
			}
		});
		
		app.streaming.$realtime_carousel=$("section#contentWall ul.streamingList").owlCarousel(app.carouselOptions)
		
		//init carousel
		this.carousel();
	},
	
	//init carousel
	carousel: function(){
		app.streaming.carouselData=$("#carousel_content").owlCarousel(app.carouselOptions).data('owlCarousel')
		
		
	},
	
	
	
	//socket
	socket: function(){
		app.socket.on("connected", function(data){
			console.log(data)
			
			//carousel destory
			app.streaming.carouselData.destroy();
			
			if(data&&data.cache&&data.cache.length>0){
				var num=0 ,isValid;
				$.each(data.cache, function(i,t){
					if(app.blacklists.indexOf(t.user.screen_name)==-1){
						t=run.createHDMA(t, "streaming");
						isValid=run.filterTweet(t);

						show.tweet(t,{isVisible:isValid.toString(), id:i});
						
						if(isValid){num++}
					}
				})
				app.streaming.$streamingBadge.html(num);
			}
			
			//rebuild carousel
			init.carousel()
			
			//hide modal
			$("#popupLoadCache").modal("hide")
		})
		
		
		//only retun gps tweet (filter in the nodejs geoviewer.js)
		app.socket.on("newTweet", function(t){
			//if(app.streaming.num>20){return;}

			//create hdma obj
			//only gps-tweeet
			if(t.coordinates&&t.coordinates.coordinates.length==2&&app.blacklists.indexOf(t.user.screen_name)==-1){
				t=run.createHDMA(t, "streaming");
				
				//check filter
				var isValid=run.filterTweet(t),
					$li=show.tweet(t,{isVisible:isValid.toString(), popupOnMap:false, carousel:{isAddItem:true}, id: app.streaming.num, masonry:{isShow:false}});
				
				app.streaming.num++;
				
				if(isValid){
					var showNum=parseInt(app.streaming.$streamingBadge.html())+1;
					app.streaming.$streamingBadge.html(showNum)	
				}

				
				//reset app.streaming.tweets
				if(app.streaming.num!=0&&app.streaming.num%app.maxTweetNum==0){
					//delete old 100 tweets
					var half=app.maxTweetNum/2;
					//app.streaming.tweets=app.streaming.tweets.splice(0,half);
					app.streaming.$masonry.find('> li').slice(half).remove();
					
					//remove carousel
					//for(var i=app.maxTweetNum;i>=half;i--){
						//app.streaming.carouselData.removeItem(i)
					//}
					$("#carousel_content .carousel-items:not(.searchResult)").slice(half).remove();
					
					
					//clear layers >> keep collecting and showing tweets on the map
					//run.clearLayers()
					console.log('over app.maxTweetnum='+app.maxTweetNum, 'tweets.length='+app.streaming.$masonry.find('> li').length);
				}
			}
			
		});
		

		
	},
	
	//map
	map: function(){		
		app.map = L.map("map", {
		  zoom: app.initZoom,
		  center: app.initCenterLatLng,
		  layers: [app.basemaps["ESRI National Geographic Map"]],
		  zoomControl: false,
		  attributionControl: true
		});

		//set up current basemap
		app.map.currentBasemap=app.basemaps["ESRI National Geographic Map"];
		
		//heatmap layer
		app.layer.heatmap = run.createHeatmapLayer({visible:true});
		app.map.addLayer(app.layer.heatmap)

		//markerCluster layer
		app.layer.markerCluster=run.createMarkerClusterLayer({visible:true, showKeywordCount:false}).addTo(app.map)
		
		//markerGroup layer
		app.layer.markerGroup=new L.featureGroup();
		
		
		//zoom control
		var zoomControl = L.control.zoom({
		  position: "bottomright"
		}).addTo(app.map);

		
		//Initialise the draw control and pass it the FeatureGroup of editable layers
		app.control.draw = new L.Control.Draw({
			draw:{
				//polyline:false,
				polygon:{
					shapeOptions:{}
				},
				//circle:false,
				//marker:false,
				retangle:{
					shapeOptions:{}
				}
			}
		}).addTo(app.map);
		
		
		//map events
		app.map.on({
			"draw:created":	function(e){
				var layer;
				
				if(e.layerType=='polygon'){
					app.layer.queryBoundary=layer=e.layer.addTo(app.map)
					
					//show coordiantes
					$("#search-geolocation").val(run.layerToBBOX(layer).join(", "));
					
					//show mask canvas layer
					/**
					if(app.layer.maskCanvas){app.map.removeLayer(app.layer.maskCanvas); app.layer.maskCanvas=null;}
					app.layer.maskCanvas=new L.TileLayer.MaskCanvas({
					     radius: 1000,  // radius in pixels or in meters (see useAbsoluteRadius)
					     useAbsoluteRadius: true,  // true: r in meters, false: r in pixels
					     color: '#000',  // the color of the layer
					     opacity: 0.3,  // opacity of the not coverted area
					})
					var data=layer.toGeoJSON().geometry.coordinates[0].map(function(lnglat){
						return [lnglat[1], lnglat[0]]
					})
					app.layer.maskCanvas.setData(data);
					console.log(app.layer.maskCanvas)
					app.map.addLayer(app.layer.maskCanvas)
					*/
					
					//do spatial query
					run.spatialQuery();
				}
		
			}
		});
		

		//controls
		var controls={
			mapGallery : L.Control.extend({
				options : {
					"collapsed" : true,
					"position" : 'topright',
					"text" : 'Map Gallery'
				},
				initialize : function(options) {
					L.Util.setOptions(this, options);
				},
				onAdd : function(map) {
					// create the control container with a particular class name
					var container = L.DomUtil.create('div', 'leaflet-control-mapGallery');
					var html = "<ul>"+
								"<li title='Showing markers' layer='markerGroup' style='display:none;'><img src='images/marker-icon.png' /></li>"+
								"<li title='Cluster Map' layer='markerCluster' style='background-color:#3071A9'><img src='images/gallery-cluster.png' /></li>"+
								"<li title='Hotspots' layer='heatmap' style='background-color:#3071A9'><img src='images/gallery-heatmap.png' /></li>"+
							   "</ul>";


					//click map gallery event
					$(container).html(html).find("ul > li").on({
						click : function() {
							var $this = $(this), 
								value = $this.attr("layer"), 
								activePanelID=$(".sidebar-wrapper .panel:visible").attr("id"),
								layerType = {
									"sidebar-streamingList":"streaming",
									"sidebar-search":"search"
								},
								layer;
							
							if(layerType[activePanelID]){
								layer=app.layer[layerType[activePanelID]][value]
							}
							
							//if this layer is already shown on the map, hide the layer and change the color
							if(layer){
								if (layer.options.visible) {	
									app.map.removeLayer(layer)
							
		//							app.map.removeLayer(layer);
									$this.css({"background-color" : ''});
									
									layer.options.visible=false;
								} else {
									app.map.addLayer(layer)
									//layer.addTo(app.map)
								
									//make the markerclusterlayer more priority
									if(value=='markerCluster'){
										layer.bringToFront();
										layer.on("clusterclick", run.clusterClickHandler);
									}
									
									$this.css({"background-color" : "#3071A9"});

									layer.options.visible=true;
								}
							}
							
						},
						mouseover : function() {
							$(".mapPopupWidget, #basemapWidget").hide();
							var $this = $(this), value = $this.attr("layer"), 
								activePanelID=$(".sidebar-wrapper .panel:visible").attr("id"),
								layerType = {
									"sidebar-streamingList":"streaming",
									"sidebar-search":"search"
								},
								layer;
							
							if(layerType[activePanelID]){
								layer=app.layer[layerType[activePanelID]][value]
							}

							//only the layer is activated
							if (layer.options.visible&&layerType[activePanelID]=='search') {
								//show map popup window
								$("#mapPopup_" + value).show();
							}
						},
						mouseleave : function() {

						}
					});
					return container
				}
			}),
			tocThumbnail: L.Control.extend({
				options : {
					"position" : 'topright',
					"text" : 'Change Base Maps'
				},
				initialize : function(options) {L.Util.setOptions(this, options);},
				onAdd : function(map) {
					//create div element
					var mainContent=L.DomUtil.create('div', 'leaflet-control-tocThumbnail'),
						html="<a class='leaflet-control-layers-toggle' href='#' title='Layers'></a>"+ $("#basemapWidget")[0].outerHTML;
					
					$(mainContent).html(html)
						.addClass('leaflet-control-layers')
						.on({
							"mouseover":mouseoverEvent,
							"click": mouseoverEvent
						})
						.find("ul li").click(function(){
							switchBaseLayer($(this).attr('title'));
						});

					//monuseoverEvent on the basemapWidget
					function mouseoverEvent(e){
						$("#basemapWidget").show().on({
							"mouseleave":function(){
								$(this).hide();
							}
						});
					}
					
					return mainContent;
				}
			})
		}
	
		//add map gallery control
		$.each(controls, function(k,v){
			app.map.addControl(new v());
		})
		
		
	},
	
	
	
	//init login
	login: function(){
		//login
		$("#formLogin").submit(function(e){
			var $this=$(this),
				username=$this.find("#formUsername").val() || "",
				password=$this.find("#formPassword").val() || "",
				rememberme=$this.find(".icheckbox_minimal").hasClass('checked');
			
			//show loading
			$("#loginLoading").show();
			$("#loginMsg").hide();
		
			if(username&&password&&username!=""&&password!=""){
				$.ajax({
					url: "login", 
					data:{username:username, password: $.md5(password)},
					type:"POST",
					dataType:"json",
					success: function(result){
						if(result&&result.status&&result.status=='ok'){
							//write cookie
							if(rememberme){
								$.cookie('HDMA', {username:result.username}, { expires: 7, path: '/' });
							}
							console.log(result)
							afterLogin(result);
							
							//hide login modal
							$("#popupLogin").modal("hide");
						}else{
							//show error msg
							$("#loginMsg").html(result.msg).show();
						}
						
						//hide loading
						$("#loginLoading").hide();
					},
					error: function(err){
						$("#loginMsg").html(err).show();
					}
				});
				
				
				/**
				app.socket.emit("login", {username:username, password:password}, function(result){
					if(result&&result.status&&result.status=='ok'){
						//write cookie
						if(rememberme){
							$.cookie('HDMA', {username:result.username}, { expires: 7, path: '/' });
						}
						
						afterLogin(result.username);
						
						//hide login modal
						$("#popupLogin").modal("hide");
						
						//disconnect socket
						//app.socket.disconnect();
						//console.log('disconnectd????');
						
					}else{
						//show error msg
						$("#loginMsg").html(result.msg).show()
					}
				
					
				})	
				*/				
			}
			
			e.preventDefault();
		});
	},
	
	//logout
	logout: function(){
		
		//change title
		$("span.usernameTitle").html('Guest');
		$("span.usernameTitle.login").html("Log in");
		
		//remove cookie
		$.removeCookie('HDMA', { path: '/' });
		
		$(".userControl").hide();
		
		//hide
		$(".filter-menu-content, .download-menu-content").hide();
		
		//refresh
		window.location.href=window.location.href
	},
	
	
	//init test mode
	testmode:function(){
		console.log("test mode")
		
		//show comparision and geoviewer
		$("ul.sidebar-menu > li").find("> a[data-target='contentComparison'], > a[data-target='contentGeoviewer']").parent().show();
	}

}



//show
var show={
	tweet: function(t, options){
		//console.log(t);
		//options
		if(!options){options={}}
		options.targetLayer=app.layer; 
		options.isVisible=options.isVisible || "true";
		options.popupOnMap=options.popupOnMap || false;
		//options.showCarousel=(options.showCarousel==null)?true:options.showCarousel; 
		//options.showMasonry=(options.showMasonry==null)?true:options.showMasonry;
		options.carouselPosition=options.carouselPosition || 0;
		options.addClass=options.addClass || null;
		options.carouselAddItem=options.carouselAddItem || false;
		options.id=options.id || null
		options.carousel=options.carousel || {}
		options.masonry=options.masonry || {}
		
		//carousel options
		var optionsCarousel=options.carousel
		optionsCarousel.isShow=(optionsCarousel.isShow==null)?true:optionsCarousel.isShow;
		optionsCarousel.carouselData=optionsCarousel.carouselData || app.streaming.carouselData;
		optionsCarousel.$target=optionsCarousel.$target || $("#carousel_content")
		optionsCarousel.insertPosition=optionsCarousel.insertPosition || 0;
		optionsCarousel.isAddItem=optionsCarousel.isAddItem || false;
		optionsCarousel.addClass=optionsCarousel.addClass || null;
		
	
		//masonry options
		var optionsMasonry=options.masonry
		optionsMasonry.isShow=(optionsMasonry.isShow==null)?true:optionsMasonry.isShow;
		optionsMasonry.$target=optionsMasonry.$target || app.streaming.$masonry;
		optionsMasonry.addClass=optionsMasonry.addClass || null;	

		//if tweet is gps-tweet
		if(t){
			var obj=t.hdma,
				output=null;
			
			//show marker
			if(obj&&obj.marker){
				if(options.isVisible=='true'){
					//cluster layer
					options.targetLayer.markerCluster.addLayer(obj.marker);
					
					//heatmap
					options.targetLayer.heatmap.addData({lat:((app.geomask.enable)?obj.latlng_geomasking.lat: lat), lng:((app.geomask.enable)?obj.latlng_geomasking.lng:lng),value:1})
					
					//marker group
					options.targetLayer.markerGroup.addLayer(obj.marker);
					
					//popup on map
					if(options.popupOnMap){
						app.popup=obj.marker.getPopup().setLatLng(obj.marker.getLatLng());
						app.popup.options.autoPan=false;
						app.popup.openOn(app.map)
					}
				}
				
				
				//show tweet in the list
				if(optionsMasonry.isShow){
					var html=obj.popupHtml,
						$li=$("<li class='tweetBox' data-tweetID='"+t.id_str+"' data-id='"+options.id+"' data-sourceType='' data-hasMedia='"+obj.hasMedia+"' style='display:"+((options.isVisible=='true')?"block":"none")+"'>"+html+"</li>");
						
					if(optionsMasonry.addClass){$li.addClass(optionsMasonry.addClass)}
						
					$li.data("tweet", t);
					
					/** masonry
					//optionsMasonry.$target.append($li).masonry("reloadItems").masonry("layout")
					optionsMasonry.$target.prepend($li).masonry("prepended", $li)
					*/
					
					app.streaming.$realtime_carousel.data('owlCarousel').addItem($li[0], optionsCarousel.insertPosition)
					
					output=$li;
				}	
				

				//show in carousel
				if(optionsCarousel.isShow&&obj.hasMedia){
					var carouselHtml=obj.carouselHtml || run.createTweetCarouselHtml(t),
						$carousel=$(carouselHtml).data({"tweet":t}).attr('data-id', options.id).css("display",(options.isVisible=='true')?"block":"none");
							
					if(optionsCarousel.addClass){$carousel.addClass(optionsCarousel.addClass)}
						
					if(optionsCarousel.isAddItem){
						optionsCarousel.carouselData.addItem($carousel[0], optionsCarousel.insertPosition) //insert to the first
						//app.streaming.carouselData.addItem($carousel[0], options.carouselPosition) //insert to the first
					}else{
						if(optionsCarousel.$target){
							optionsCarousel.$target.append($carousel);
						}
						//$("#carousel_content").append($carousel)
					}
				}
					
					
				
				return output;
			
			}//end obj.marker
				
		}//end if(t)
	
	},

	
	
	//show spatial query results
	spatialQueryResult: function(results){
		
		//clear the number of results in the badge
		$("#search-tabs span.badge").html("")
		$("#sidebar-search ul.searchList").html("")
	
		//clear all layers on the map
		//run.clearLayers();

		//clear existing search results
		$("#tweet_content .owl-item").remove(".carousel-item.searchResult");
		
		//carousel destroy
		app.streaming.carouselData.destroy();
		
		//parse results
		var now=new Date();
		if(results&&results.length>0){
			//remove draw rectangle
			//app.map.removeLayer(app.layer.queryBoundary)
			
			//hide loading icon
			$(".search-msg").html("")
			
			//enable slider
			app.heatmap.slider.slider("enable");
			
			var number=0;


			//show tweets
			for(var i=0, length=results.length; i<length; i++){
				var t=run.createHDMA(results[i], 'search'),
					isVisible=run.filterTweet(t);
				
				show.tweet(t, {isVisible:isVisible.toString(), carousel:{insertPosition:-1, addClass:"searchResult"}, masonry:{addClass:"searchResult"}, id:i})
				if(isVisible){number++}
			}
			
			console.log("[spatial query] processed time= "+(new Date()-now)/1000+"s")

			//show the number of results in the badge
			//need to wait until the active tab finishes switching 
			setTimeout(function(){
				var badge=app.streaming.$streamingBadge;
				badge.html(parseFloat(badge.html())+number)
				//hide loading
				$(".search-msg").html("");
			},10)
			
	
		}else{
			$(".search-msg").html("Found 0 results.<br>Please search again by other criteria")
		}
		
		
		
		//init carousel		
		now=new Date()
		init.carousel();
		console.log("[spatial query] carousel time= "+(new Date()-now)/1000+"s")
	},
	
	
	//show hightlight keyword
	highlightKeyword: function(keyword){
		console.log(keyword)
	
	}
	
	

}





var run={
	//linkify
	linkify: function(text){
		return text.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&\?\/.=]+/, function(m) {
			return "<a href='"+m+"' target='_blank'>"+m+"</a>";
		}).replace(/[@#]\w+/g,function(b,c){
			c="twitter.com/";
			//return b.link("//"+(b[a="search"]("#")?c:a+"."+c+a+"?q=")+b)
			return "<a href='"+("http://"+(b[a="search"]("#")?c:a+"."+c+a+"?q=")+b)+"' target='_blank'>"+b+"</a>";
		});
	},
	
	
	//resize map and carousel
	resizeMap: function(css_map, css_carousel, callback){
		$("#map").animate(css_map, 500, function() {
			app.map.invalidateSize(false);
			
			$("#tweet-carousel").css(css_carousel);
			if(callback){callback();}
		});

	},
	
	//create hdma object
	createHDMA: function(t, sourceType){
		sourceType=sourceType || "streaming";
	
		if(t.coordinates&&t.coordinates.coordinates.length==2){
			var coordinates=t.coordinates,
				lat=coordinates.coordinates[1],
				lng=coordinates.coordinates[0];
					
			obj={
				popupHtml:run.createTweetWidgetHtml(t), //run.createMarkerPopupHtml(t),
				latlng:new L.latLng(lat, lng),
				marker:null,
				latlng_geomasking:new L.latLng(run.geomask(lat, app.geomask.meter), run.geomask(lng, app.geomask.meter)),
				hasMedia:(t.entities&&t.entities.media&&t.entities.media.length>0)?true:false,
				mLocal:moment(t.created_at)
			};
			
			obj.marker=new L.marker((app.geomask.enable)?obj.latlng_geomasking:obj.latlng).bindPopup(obj.popupHtml).setIcon(app.icon.getActive((sourceType=='search')?".search-default":null));
			obj.marker.hdma={
				tweetText:t.text,
				latlng_geomasking:obj.latlng_geomasking
			}
			
			t.hdma=obj
			t.hdma.carouselHtml=run.createTweetCarouselHtml(t);
			
			return t
		}
	},
	
	//spatial search
	spatialQuery: function(){
		//clear all layers on the map
		run.clearLayers();
		
		//get params
		var params={
			keywords:$("#search-keyword").val(),
			geojsonPolygon: ((app.layer.queryBoundary)?L.geoJson(app.layer.queryBoundary.toGeoJSON()):null),
			startDate:$("#search-startDate").val() || null,
			endDate:$("#search-endDate").val() || null,
			viewMode:"image"
		}
		
		//var defaultBound=[[32.534180,-117.595898],[33.507161,-117.595898],[33.507161,-115.835742],[32.534180,-115.835742],[32.534180,-117.595898]];
		//app.layer.queryBoundary=new L.polygon(defaultBound);
		

		
		//show loading
		$(".search-msg").html("<img src='images/loading.gif' style='width:25px; height:25px;' />")
		
		//filter existing tweets
		app.filter=$.extend({}, params)
		run.filterExistingTweets(params);
		
		return; 
		//if endDate && startDate !="" >> do historical search
		if(params.startDate&&params.startDate!=""&&params.endDate&&params.endDate!=""){
			//keyword
			params.keywords=run.parseSearchTerm(params.keywords);
			

			var now=new Date();
			//send query params by socket
			app.socket.emit("spatialQuery", params, function(results){
				console.log("[spatial query] search and callback time= "+(new Date()-now)/1000+"s")
				console.log("[spatial query] search results = "+results.length)
				
				//app.search.results=results;
				show.spatialQueryResult(results);
			});
		}
		
	},
	
	
	//filter existing tweets
	filterExistingTweets:function(params){
		var $obj=$("#carousel_content .carousel-item, .streamingList li.tweetBox").hide(),
			$select=$obj.filter(function(){
				var $this=$(this),
					isValid=false,
					tweet=$this.data('tweet');
					
				//show tweet
				//only show markers on the map
				if(tweet){
					isValid=run.filterTweet(tweet, params)
					show.tweet(tweet, {carousel:{isShow:false}, masonry:{isShow:false}, isVisible:isValid.toString()})
				}
					
				return isValid;
			}).show();
		
		app.streaming.$streamingBadge.html($select.length);
		
		//hide loading
		$(".search-msg").html("");
	},
	
	
	//get bbox of layer
	layerToBBOX:function(layer){
		var bbox=[], result=null;
		
		if(layer&&layer._latlngs){
			layer._latlngs.map(function(obj,i){
				if(i==0 || i==2){  //get min and max latlng
					bbox.push(obj.lat)
					bbox.push(obj.lng)
				}
			})
			result=bbox;
		}
		
		
		return result;
	},
	
	
	//parse keyword to match the requirement of text search in mongodb
	//use ',' for multiple keywords and "-" for negative keyword
	parseSearchTerm:function(term){
		if(term&&String(term).trim()!=""){
			return term.split(',').map(function(k){
				k=String(k).trim();
				
				//check if k is a phrase, contains blank " ". e.g. san diego
				//if(k.split(" ").length>1){k="\""+k+"\""}
				
				//check if a hyphen is there to do negative search
				if(k.substring(0,1)=='-'){
					var rest=k.substring(1,k.length);
					if(rest.split(' ').length>1){rest="\""+rest+"\""}
					k="-"+rest
				}else{
					//make k as phrase to do text search in mongodb
					//e.g. san diego, fire >> "san diego" "fire" to do AND logical search
					k="\""+k+"\"";
				}
				
				return k
			}).join(" ");
		}
	},

	
	//filter tweet
	filterTweet: function(t, options){
		var filter=app.filter,
			isValid=true;
		
		//options
		if(!options){options={}}
		options.keywords=options.keywords || filter.keywords;
		options.viewMode=options.viewMode || null;
		options.startDate=options.startDate || filter.startDate;
		options.endDate=options.endDate || filter.endDate;
		options.geojsonPolygon=options.geojsonPolygon || filter.geojsonPolygon;
		
		
		if(t&&t.hdma){
			var obj=t.hdma;
		
			//filter by viewmode
			// null >> show both image and text
			// image >> only show image
			// text >> only show text
			if(options.viewMode&&isValid){
				switch (options.viewMode){
					case "image":
						if(!obj.hasMedia){isValid=false;}
					break;
					case "text":
						if(obj.hasMedia){isValid=false;}
					break;
				}
			}

			
			
			//filter by startDate and endDate
			if(((options.startDate&&options.startDate!="") || (options.endDate&&options.endDate!=""))&&isValid){
				if(options.startDate && moment(options.startDate) > obj.mLocal){
					isValid=false;
				}
				if(options.endDate && moment(options.endDate).add(1, "days") < obj.mLocal){
					isValid=false;
				}
			}
		
			//filter by location
			if(options.geojsonPolygon){
				var latlng=(app.geomask.enable)?obj.latlng_geomasking:obj.latlng,
					inside=leafletPip.pointInLayer(latlng, options.geojsonPolygon);
				
				if(inside.length==0){isValid=false}
			}
			
			
			//filter by keyword
			if(options.keywords&&options.keywords!=""&&isValid){
				var isExclude=false,
					keywords=options.keywords.split(",").map(function(k){
						k=String(k).trim();
						
						if(k.substring(0,1)=='-'){
							//exclude keyword
							isExclude=true;
							
							//var excludes=k.substring(k.lastIndexOf("(")+1, k.lastIndexOf(")")).split("|").map(function(v){return "(^|\\s+)"+String(v).trim()+"($|\\s+)"}).join("|");
							var excludes="(^|\\s+)"+k.substring(1,k.length)+"($|\\s+)";
							return "((?!("+excludes+")).)"
						}else{
							return "(?=.*?((^|\\s+)"+k.toLowerCase()+"($|\\s+)))";
						}
					}).join("");
				//keywords=new RegExp(keywords, "gi")
				keywords=new RegExp("^"+keywords+((!isExclude)?".":"")+"*$", "gi")
				
				
				//filter text 
				isValid=keywords.test(t.text.toLowerCase())
			}

		}
		
		
		return isValid;
	},
	
	
	//clear all layers on the map
	clearLayers: function(){
		var targetLayer=app.layer;
		
		if(targetLayer){
			//remove layer
			//cluster layer
			if(targetLayer.markerCluster){targetLayer.markerCluster.clearLayers();}
				
			//heatmap
			if(targetLayer.heatmap){	
				targetLayer.heatmap.setData({data:[]})
				if(targetLayer.heatmap._heatmap){
					targetLayer.heatmap._heatmap.repaint();
				}
				//app.map.removeLayer(targetLayer.heatmap)
				
				/**
					
				//reset heatmap
				//app.layer.heatmap._reset()
				var visible=targetLayer.heatmap.options.visible
				targetLayer.heatmap=run.createHeatmapLayer({visible:visible})
				if(visible){targetLayer.heatmap.addTo(app.map)}
				*/
			}
				
			if(targetLayer.markerGroup){
				targetLayer.markerGroup.clearLayers();
			}
		}
	},
	
	//switch layers: app.layer.streaming or app.layer.search
	switchLayer: function(type){
		if(type&&type!=""){
			//hide all layers first
			$.each(app.layer, function(k,v){
				if(k=='streaming' || k=='search'){
					$.each(v, function(o,layer){
						if(layer&&layer._map){
							app.map.removeLayer(layer)
						}
					});
				}
			})
			
			//show target layers
			if(app.layer[type]){
				$.each(app.layer[type], function(k,v){
					if(v){
						//highlight icon in the leaflet-control-mapGallery 
						//and show on the map depending on its options.visible
						var layerType=v.options.layerType;
						if(layerType&&layerType!=""){
							var $icon=$(".leaflet-control-mapGallery li[layer='"+layerType+"']");
							if($icon.length>0){
								$icon.css({"background-color":""})
								if(v.options.visible){$icon.css({"background-color":"#3071A9"}); app.map.addLayer(v);}
							}
						}
					}
				})
			}
			
		}
		
	},
	
	//create heatmap layer
	createHeatmapLayer: function(options){
		//options
		if(!options){options={}}
		options.visible=options.visible || false;
		options.radius=options.radius || parseInt(app.heatmap.radius)/111000; 
		options.scaleRadius=true
		options.useLocalExtrema=false;
		options.maxOpacity=.8;
	
		
		//create heatmap layer
		var layer=new HeatmapOverlay(options)
		layer._max=app.heatmap.max;
		
		//var layer=L.heatLayer([], {radius: options.radius, max:1});
		
		if(layer.options){
			layer.options.visible=options.visible
			layer.options.layerType='heatmap'
		}else{
			layer.options={
				visible:options.visible,
				layerType:'heatmap'
			}
		}
		
		return layer
	},
	
	
	//create markerCluster layer
	createMarkerClusterLayer: function(options){
		//options
		if(!options){options={}}
		options.visible=options.visible || false;
		options.showKeywordCount=options.showKeywordCount || false;
		
		var layer=hdma.layer.markerCluster(null,{
			iconCreateFunction: function (cluster) {
			
				//get top keywords
				var topKeywords=run.getTopKeywords(cluster.getAllChildMarkers()),
					topKeyword=topKeywords.map(function(o,i){return "<li><a href='#' onclick='show.highlightKeyword(\""+o.keyword+"\")'>"+o.keyword+((options.showKeywordCount)?(" ("+o.count+")"):"")+"</a></li>"}).join("")
				
				
				var childCount = cluster.getChildCount();

				var c = ' marker-cluster-';
				if (childCount < 10) {
					c += 'small';
				} else if (childCount < 100) {
					c += 'medium';
				} else {
					c += 'large';
				}
		
				return new L.DivIcon({ html: '<div><span>' + childCount + '<ul>'+topKeyword+'</ul></span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });
			}
		},{
				//clusterclick event
				clusterclick : run.clusterClickHandler
		});
		layer.options.visible=options.visible;
		layer.options.layerType='markerCluster'
		
		return layer;
	},
	
	
	getTopKeywords: function(markers, options){
		//options
		if(!options){options={}}
		options.top=options.top || 3;
		
		var text="";
		$.each(markers, function(i,m){
			if(m.hdma.tweetText){
				text+=m.hdma.tweetText+" ";
			}
		})
		
		//using underscore.js to get word frequency
		//remove a tag and other characters
		text=text.replace(/\<a.*?\<\/a\>/g, "").replace(/[^a-zA-Z\@\#]/g,' ').split(" ");
		var results=_.chain(text)
		  .without('',' ','and','then','it','RT','It','In', 'And', 'not', 'am', 'do', 'go', 'pm', 'me', 'so', 'at','amp','gt', 'my', 'blank', 'target', 'but', 'href', "it's", "co", "isn't", "don't", "very", "here", "there", "also", "us", "are", "they", "from", "your", "new", "about", "will","by", "now","more", "than", "dr", "you're", "we", "what", "get","or", 'the','to','a','an','of','for','as','i','with','it','is','on','that','this','can','in','be','has','if', 'have', 'has', 'http', 'https', 'rt', 'you')
		  .reject(function(w){ return w.length==1})  //remove only containing one character
		  .groupBy(function(word){return word;})
		  .sortBy(function(word){ return -word.length; })
		  .value();

		return results.splice(0,options.top).map(function(w){return {keyword:w[0], count:w.length}})	
	},
	
	
	//cluster click event
	clusterClickHandler:function(e){
		if(e.layer && e.layer._childCount){
			//console.log(e.layer)
			
		}
	},
	
	
	//create marker popup html
	createMarkerPopupHtml: function(tweet){
		var html="<div class='marker-popup'>",
			text=tweet.text,
			time=tweet.created_at_local,
			m_time=moment(time).add(8, "hours"),  //<<<need to fix!!! need to consider daylight saving time!
			screen_name=tweet.user.screen_name.replace(/\_/g, " "),
			account=tweet.user.name,
			img=tweet.user.profile_image_url;
			
		html+="<div class='author'><img class='profile-image' src='"+img+"' /><span class='fullname'>"+screen_name+"</span><span class='account-name'>"+account+"</span></div>"+
			  "<div class='content'><p class='text'>"+text+"</p><span class='time'>"+m_time.format("hh:mm A - DD MMM YYYY")+"</span></div>"+
			  "</div>";
		
		return html;	
	},
	
	
	//show tweet image in the carousel
	createTweetCarouselHtml: function(t, num){
		if(t.entities&&t.entities.media&&t.entities.media.length>0){
			var media=t.entities.media[0],
				user=t.user,
				hdma=t.hdma,
				html="<div class='carousel-item' data-num="+num+" data-hasMedia='true'>"+
						"<div class='carousel-userProfile hover'><a href='https://twitter.com/"+user.screen_name+"/' target='_blank'><img src='"+ user.profile_image_url+"' /></a></div>"+
						"<div class='carousel-datetime hover'>"+hdma.mLocal.format("YYYY-MM-DD HH:mm:ss")+"</div>"+
						"<div class='carousel-image'><img src='"+media.media_url+"' style='height:"+($("#carousel_content").height())+"px !important;' /></div>"+
						"<div class='carousel-description hover'>"+t.text+"</div>"+
						"<div class='carousel-toolbar hover'><ul><li>"+""+"</li></ul></div>"+
					 "</div>";
			return html;
		}
		
	},
	
	
	
	//show tweet content in the list
	createTweetWidgetHtml: function(t, options){
		//options
		if(!options){options={}}
		options.twitterWidget=options.twitterWidget || false;
		
		
		var html="",
			tweetID=t.id_str,
			entities=t.entities,
			user=t.user,
			created_at=t.created_at,
			m_createdAt=moment(created_at),
			dateFormat="hh:mm A - DD MMM YYYY",
			datetime=m_createdAt.format(dateFormat) ,//|| m_createdAt.twitterLong(),
			//latlng_geomasking=t.hdma.latlng_geomasking || {lat:0, lng:0},
			//coordinates=(app.geomask.enable)?[latlng_geomasking.lng, latlng_geomasking.lat]:t.coordinates.coordinates,
			media='',
			size;
			
		//linkify
		t.text=run.linkify(t.text);
		
		if(entities&&entities.media&&entities.media.length>0){
			$.each(entities.media, function(i,m){
				switch(m.type){
					case "photo":
						size=m.sizes.small;
						media+="<a class='photo-link box-"+i+"' target='_blank' href='"+m.expanded_url+"' data=scribe='element:photo'><img class='autosized-media' data-srcset='"+""+"' data-crop-x='0' data-crop-y='21' data-image-index='0' alt='View image on Twitter' title='View image on Twitter' data-width='"+size.w+"' data-height='"+size.h+"' src='"+m.media_url+"' width='"+size.w+"' height='"+size.h+"'></a>";
					break;
				}
			})
		}

		//create widget manually
		html='<div class="twitter-tweet twitter-tweet-rendered" title="Embedded Tweet" >'+
				'<div class="root standalone-tweet ltr twitter-tweet not-touch">'+
					'<blockquote class="tweet subject expanded h-entry" data-tweet-id="'+tweetID+'" cite="https://twitter.com/'+user.screen_name+'/status/'+tweetID+'" >'+
						(function(){
							if(media!=""){
								//'<a class="photo-link  box-0" target="_blank" href="http://twitter.com/Salvie_Lozano/status/545092123335225344/photo/1" data-scribe="element:photo"><img class="autosized-media" data-srcset="https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FB5COZQRCQAApsvl.jpg%3Alarge 1024w,https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FB5COZQRCQAApsvl.jpg 600w,https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FB5COZQRCQAApsvl.jpg%3Asmall 340w" data-crop-x="0" data-crop-y="21" data-image-index="0" alt="View image on Twitter" title="View image on Twitter" data-width="600" data-height="600" src="https://pbs.twimg.com/media/B5COZQRCQAApsvl.jpg:small" width="251" height="251"></a>'+
								return '<div class="cards-base cards-multimedia customisable-border" data-scribe="component:card" >'+
											'<div class="media">'+media+'</div>'+
									   '</div>'
							}else{
								return ""
							}
						})()+
						'<div class="header">'+
							'<div class="h-card p-author" data-scribe="component:author">'+
								'<a class="u-url profile" target="_blank" href="https://twitter.com/"'+user.screen_name+'" aria-label="'+user.name+' (screen name: '+user.screen_name+')" data-scribe="element:user_link">'+
									'<img class="u-photo avatar" alt="" src="'+user.profile_image_url_https+'" data-scribe="element:avatar">'+
									'<span class="full-name"><span class="p-name customisable-highlight" data-scribe="element:name">'+user.name+'</span></span>'+
									'<span class="p-nickname" dir="ltr" data-scribe="element:screen_name">@<b>'+user.screen_name+'</b></span>'+
								'</a>'+
							'</div>'+
							'<a class="follow-button profile" target="_blank" href="https://twitter.com/'+user.screen_name+'" role="button" data-scribe="component:followbutton" title="Follow '+user.name+' on Twitter"><i class="ic-button-bird"></i>Follow</a>'+
						'</div>'+
						'<div class="content e-entry-content" data-scribe="component:tweet">'+
							'<p class="e-entry-title">'+t.text+'</p>'+
							'<div class="dateline collapsible-container">'+
								'<a class="u-url customisable-highlight long-permalink" target="_blank" href="https://twitter.com/'+user.screen_name+'/status/'+tweetID+'" data-datetime="'+created_at+'" data-scribe="element:full_timestamp"><time class="dt-updated" datetime="'+created_at+'" title="Time posted: '+created_at+'">'+datetime+'</time></a>'+
								'<span class="p-geo" data-collapsed-class="collapse-geo" title="Posted from '+t.place.full_name+'"><i class="ic-geo ic-mask"></i><b>'+t.place.full_name+'</b></span>'+
							'</div>'+
						'</div>'+
						/**
						'<div class="footer customisable-border" data-scribe="component:footer">'+
							'<ul class="tweet-actions" role="menu" aria-label="Tweet actions" data-scribe="component:actions">'+
								//'<li><a class="showMarker" data-tweetID="'+tweetID+'" data-lat="'+coordinates[1]+'" data-lng="'+coordinates[0]+'" ><i class="ic-geo ic-mask"></i><b>Show Location</b></a></li>'+
								'<li><a href="https://twitter.com/intent/tweet?in_reply_to='+tweetID+'" class="reply-action web-intent" title="Reply" data-scribe="element:reply"><i class="ic-reply ic-mask"></i><b>Reply</b></a></li>'+
								'<li><a href="https://twitter.com/intent/retweet?tweet_id='+tweetID+'" class="retweet-action web-intent" title="Retweet" data-scribe="element:retweet"><i class="ic-retweet ic-mask"></i><b>Retweet</b></a></li>'+
								'<li><a href="https://twitter.com/intent/favorite?tweet_id='+tweetID+'" class="favorite-action web-intent" title="Favorite" data-scribe="element:favorite"><i class="ic-fav ic-mask"></i><b>Favorite</b></a></li>'+
							'</ul>'+
						'</div>'+
						*/
					'</blockquote>'+
				'</div>'+
			 '</div>';
		
		
		
		//use twttr.widgets.load or create
		if(options.twitterWidget){
			html="<blockquote class='twitter-tweet'>&mdash; "+user.name+" (@"+user.screen_name+") "+
				   "<a href='https://twitter.com/"+user.screen_name+"/status/"+tweetID+"'>"+moment(parseInt(t.timestamp_ms)).format("MMMM D, YYYY") +"</a>"+
				 "</blockquote>";
		}
		
		
		
		return html;
	},
	
	
	//geomasking
	geomask: function(value, meter){
		var random=Math.random()*2-1
		return parseFloat(value)+((random*meter)/100000)
	},
	
	
	//change marker icon
	changeMarkerIcon: function(img_src, width, height) {
		var icon = new L.icon({
			iconUrl : img_src,
			iconSize : [width, height], //[12.5, 21],
			iconAnchor : [width / 2, height / 2]// [6.25, 10.5]
		});

		var iconHover = new L.icon({
			iconUrl : (function() {
				if(img_src.split("bullet").length>1){
					return "images/marker/1374590745_bullet-red.png"
				}else{
					return "images/marker/Magenta/5.png"
					//return "images/1374595382_marker_rounded_red.png"
				}

			})(),
			iconSize : [width, height], //[12.5, 21],
			iconAnchor : [width / 2, height / 2]// [6.25, 10.5]
		});

		

		$.each(app.layer.search.markerGroup.getLayers(), function(k, marker) {
			marker.setIcon(icon);
			marker.options.iconDefault = icon;
			marker.options.iconHover = iconHover;
		})
		
			
	},
	
	
	//after login
	afterLogin: function(result){
		$("#loginLoading").hide();
		
		if(result&&result.status=='ok'){
			//cache user
			app.user=result;
			//show username
			$("#navbar-toolbar #username").html(result.username);
			$("#navbar-toolbar #btn-login").off('click').click(function(){run.logout();}).find("span").html("Log out")
			
			
			$("#download-btn").off('click').click(function(){
				if(result.downloadURL){
					var url=result.downloadURL,
						texts=$("#search-keyword").val() || "",
						startDate=$("#search-startDate").val() || "",
						endDate=$("#search-endDate").val() || "",
						bbox=$("#search-geolocation").val() || "";
						
					url=url.replace("{texts}",texts).replace("{startDate}", startDate).replace("{endDate}", endDate).replace("{bbox}", bbox);
					window.open(url);
				}
			}).show();

			
			//hide login modal
			$("#popupLogin").modal("hide");
		}else{
			$("#loginMsg").html(result.msg).show();
		}
		
	},
	
	
	//log out
	logout: function(){
		app.user=null;
		
		$("#download-btn").off("click").hide();
		$("#navbar-toolbar #username").html("");
		$("#navbar-toolbar #btn-login").off("click").click(function(){
			$("#popupLogin").modal({})
		}).find("span").html("Log in")

	}
	
	
}









//after login
function afterLogin(obj){
	//show username
	$("span.usernameTitle").html(obj.username)
	
	//update token and show token
	if(obj.token){
		app.user.token=obj.token;
		$("span#usermenuToken").html(obj.token)
	}
	
	//enable download function
	$(".box-map-table").ready(function(){
		$(".userControl").show();
	});
	
	//show filter menu
	$(".filter-menu-content").show();
	
	//enable donwload menu 
	$("ul.sidebar-menu li > a[data-target='contentDownload']").parent("li").show();
	if(obj.html&&obj.html.download&&obj.html.download!=""){
		writeContent("#contentDownload > iframe", obj.html.download)
	}

	
	//add keyword page
	if(obj.isAdmin&&obj.html.addKeyword&&obj.html.addKeyword!=""){
		$("ul.sidebar-menu li.admin-content").show();
		writeContent("#contentAdmin > iframe", obj.html.addKeyword)
	}
	
	
	//write content to iframe
	function writeContent(selector, content){
		var doc=$(selector)[0].contentWindow.document;
		doc.open()
		doc.write(content);
		doc.close();
	}
	
	
}











//get url parameter
function getURLParameter(name){
	var url=location.href + "&",
		splits=url.split("?"),
		host=splits[0],
		parameters=(splits[1])?splits[1].split("&"):[],
		result=null;
			
	$.each(parameters, function(i,p){
		var key=p.split("=")[0],
			value=p.split("=")[1];
		
		if(key==name){
			result=value
			return false;
		}
	})	
	
	
	return result;
}






//read project
function readTopic(json, options){
	if(!json){console.log("[ERROR] readProject: no json."); return; }

	if(!options){options={}}
	options.refreshMenuKeyword=(!options.refreshMenuKeyword&&options.refreshMenuKeyword!=false)?true:false;
	
	//clear chart content and switch to daily chart
	$(".box-trend.default-daily .nav-tabs li:nth-child(3) a").trigger('click');
	$(".box-trend.default-weekly .nav-tabs li:nth-child(2) a").trigger('click');
	$(".chart.tab-pane").html("")
	$(".box-trend .nav-tabs li a[data-toggle='tab']").off('shown.bs.tab')

	//$.getJSON(jsonPath, function(json){
		if(json){
			//topic
			app.topic=json.name;
			
			//show applications
			if(json.applications && json.applications.length>0){
				show.application(json.applications);
			}
			
			
			//show map data
			show.mapData(json.searchAreas, json.keywords, json.results.cities);
			
			//show keywords
			if(options.refreshMenuKeyword){
				show.menuFilter();
				show.menuCities(json.searchAreas)
				show.menuKeyword(json.keywords)
			}
			
			//show index
			show.index(json.index, json.results.trend, (json.searchAreas.group)?json.searchAreas.group:json.searchAreas.counts[0].groups[0]);
			
			//show google trend
			show.googleTrend(json.keywords);
			
			//results
			var html_dashboard='',
				targets=[
					{key: "index", target:".content-index", label: "Index"},
					{key: "wordCloud", target:".box-wordcloud", label:"Word Cloud", show:function(v){show.wordcloud(v, ".box-wordcloud");}},
					{key: "trend", target:".box-trend", label:"Trend", show:function(v){show.trend(v, '.box-trend');}},
					//{key: "Google Trend", target:".box-googleTrend", label:"Google Trend"},
					{key: "topURLs", target:'.box-topURL', label:'Top URL', show:function(v){show.table("Top URL", ".box-topURL", v, {opengraph:true, titleAnnotation:"(The Most Referred Web Pages)", clickFunction:function(value){show.dataTable({url:value}, "Tweets contain <b>"+value+"</b>", {highlightKeywords:[value]})}});}},
					{key: "topHashtags", target:".box-topHashtag", label:"Top Hashtags", show:function(v){show.table("Top Hashtags", ".box-topHashtag", v,{contentClass:'showTweet-hashtag', clickFunction:function(value){show.dataTable({hashtags:value}, "Tweets contain <b>"+value+"</b> hashtags", {highlightKeywords:["#"+value]});}});}},
					{key: "topMentions", target:".box-topMention",label:"Top Mentions", show:function(v){show.table("Top Mentions", ".box-topMention", v, {contentClass:'showTweet-mention', clickFunction:function(value){show.dataTable({mentions:value}, "Tweets mention <b>"+value+"</b>", {highlightKeywords:["@"+value]});}});}},
					{key: "topRetweets", target:".box-topRetweet", label:"Top Retweet", show:function(v){show.table("Top Retweets", ".box-topRetweet", v, {contentClass:'showTweet-retweet', clickFunction:function(value){show.dataTable({retweeted_id:value}, "Tweets retweet <b>"+value+"</b>", {highlightKeywords:[value]});}});}},
					{key: "topMedia", target:".box-topMedia", label:"Top Media", show:function(v){show.carousel("Top Media", ".box-topMedia", v, {contentClass:'showTweet-media', clickFunction:function(params, value){show.dataTable(params, "Tweets contain <b>"+value+"</b> media", {highlightKeywords:[value]});}});}},
					{key: "map", target:".box-map", label:"Top Cities"}
				],
				$navMenu=$(".dashboard-menu");
			
			$navMenu.html("");
			$.each(targets, function(i, obj){
				$navMenu.append("<li><a data-href='"+obj.target+"' data-target='contentDashboard' class='sectionSwitch'><i class='fa fa-angle-double-right'></i>"+obj.label+"</a></li>");
				
				if(json.results[obj.key]){
					if(obj.show){
						obj.show(json.results[obj.key]);
					}
				}
			});
			
			$navMenu.find("li").click(function(){
				var $this=$(this),
					href=$this.find("> a").attr('data-href');
				
				if(href){
					$('html, body').animate({
				        scrollTop: $(href).offset().top - 50
				    }, 500);
				}
			});
			
			
			
			
			//click event on expand-arrow
			$(".expand-arrow").off("click").click(function(){
				var $this=$(this),
					$table=$this.siblings("table");
				
				if($table.find("tr:nth-child(12)").is(":visible")==false){
					//show the rest tr
					$table.find("tr:nth-child(n+12)").fadeIn(500, function(){
						$this.html("<center><i class='fa fa-arrow-circle-up'></i> Less Results</center>");
					});
				}else{
					//hide the rest tr
					$table.find("tr:nth-child(n+12)").fadeOut(500, function(){
						$this.html("<center><i class='fa fa-arrow-circle-down'></i> More Results</center>");
					});
					
				}
				
			})
			
			//show tweet geojson layer
			show.tweetLayer();
			
			//show comparison chart
			show.comparison(json)
	
		}	
	//});
}




//show content
var show2={
	//index
	index:function(data, trend, searchArea){
		var html="",
			bgs=["bg-aqua","bg-green","bg-yellow","bg-red"],
			num=0,
			length=trend.length,
			mToday=moment(trend[length-2].date),
			mSince=moment(trend[0].date),
			mPast90day=moment(mToday).subtract(90, 'days'),
			valueYesterday=trend[length-3].count,
			selectCity=$(".cities-menu select").val(),
			cityLabel=(selectCity!='none')?"the Selected City":app.labels[searchArea],
			labels={
				"newTweets":{
					value:trend[length-2].count,
					fx:function(){var v=this.value; return "<h3>"+v+" <span class='tweetChange'>("+ ((v-valueYesterday>=0)?"+":"")+(v-valueYesterday)+")</span></h3><p>Tweets from "+cityLabel+"<br>on "+mToday.format("YYYY-MM-DD")+"</p>"},
				},
				"weekTweets":{
					value:data["past7day"],
					fx:function(){var v=this.value; return "<h3>"+v+"</h3><p>Tweets from "+ cityLabel +"<br>in past 7 days ("+ moment(mToday).subtract(6,"days").format("YYYY-MM-DD")+" ~ "+mToday.format("YYYY-MM-DD")+")</p>"}
				},
				"monthTweets":{
					value:data["past30day"],
					fx:function(){var v=this.value; return "<h3>"+v+"</h3><p>Tweets from "+ cityLabel +"<br>in past 30 days ("+ moment(mToday).subtract(29,"days").format("YYYY-MM-DD")+" ~ "+mToday.format("YYYY-MM-DD")+")</p>"}
				},
				"totalTweets":{
					value:data["all"],
					fx:function(){var v=this.value; return "<h3>"+v+"</h3><p>Tweets from "+ cityLabel +"<br> since "+mSince.format("YYYY-MM-DD")+"</p>"}
				}
			};
		
		
		$.each(labels, function(k,obj){
			html+="<div class='col-lg-3 col-xs-6'><div class='small-box "+bgs[num]+"'><div class='inner'>"+
                     obj.fx()+
                     "<div class='icon'><i class='ion ion-stats-bars'></i></div>"+
                     //"<a href='#' class='small-box-footer'>More info <i class='fa fa-arrow-circle-right'></i></a>"+
                  "</div></div></div>";
            
            num++;
            if(num>=4){num=0}                
		});
		
		$(".content-index").html(html);
		
	},
	
	//keyword
	menuKeyword:function(data){
		var html_keywords='';
			
		$.each(data, function(i,k){
			//html_keywords+="<li><a ><i class='fa fa-angle-double-right'></i>"+k+"</a></li>";
			html_keywords+="<li><a><input type='checkbox' checked value='"+k+"' data-type='keyword'></input><span>&nbsp; "+k+"</span></a></li>";

		});
		$(".keywords-menu").html(html_keywords)
		
		
		//add click event in the .refreshTopic
		var $target=$(".refreshTopic");
		$target.find("input").click(function(){
			show.report();
		});
		$target.find('span').click(function(){
			$(this).siblings('input').trigger('click');
		})
		
		//show how many keyword in the badge
		$(".badge-keywords").html(data.length);
	},
	
	//show report
	report: function(){
		var $checks=$(".refreshTopic").find("input:checked"),
			keyword=$checks.filter("[data-type='keyword']").map(function(){return this.value}).get().join(",");
			
		if(keyword&&keyword!=""){
			//show loading
			$("#popupLoading").modal("show");
			
			//clear trend data
			app.trend.data={current:null, historical:null}
			
			//uncheck
			$('.icheckbox_minimal').iCheck('uncheck');
			$('.box-trend .iradio_minimal').iCheck('uncheck').iCheck('disable').last().iCheck('check');
			$(".box-trend li.loadingHistorical").show();
			
			//get report
			$.getJSON(getRequestURL("getReport",{}), function(json){
				if(json&&!json.error){

					readTopic(json, {refreshMenuKeyword: false});
						
					//hide loading
					$("#popupLoading").modal("hide")
				}
			});
		}else{
			alert("Please at least select one keyword.");
		}
	},
	
	//google trend
	googleTrend: function(keywords){
		var $target=$(".box-googleTrend "),
			width=$target.width(),
			height=$target.height();
			
		$target.find("> iframe").attr("src", "http://www.google.com/trends/fetchComponent?hl=en-US&geo=US&q="+encodeURIComponent(keywords.join(","))+"&cid=TIMESERIES_GRAPH_0&export=5&w="+width+"&h="+height);
	},
	
	//filter
	menuFilter: function(){
		var filters={
			//"removeRT": "Remove Retweet",
			//"removeURL": "Remove URL",
			"removeDuplicate": "Remove Duplicate",
			//"machineLearning": "Machine Learning Filter"
		},
		html=$.map(filters, function(v,k){return "<li "+((k=='removeDuplicate')?"style='display:none;'":"")+"><a><input type='checkbox' value='"+k+"' "+((k=='removeDuplicate' || (k=='machineLearning'&&app.topic=='flu'))?"checked":"")+" ></input><span>&nbsp; "+v+"</span></a></li>"}).join("");
		$(".filter-menu").html(html);
	},
	
	//menu cities
	menuCities: function(data){
		var $target=$(".cities-menu"),
			cities=$.map(data.cities, function(obj, k){return ((obj.country)?obj.country:"US")+": "+k}),
			group=(data.group&&data.group!="")?data.group:"All Cities",
			html="<option value='none'>--"+((app.labels[group])?app.labels[group]:group)+"</option>",
			$comparison=$("#contentComparison .small-box");
		
		
		if(app.topic.toUpperCase()=='EBOLA-US'){
			html+="<option value='Cleveland,Dallas,New York - Jersey City - Newark'>--U.S. 3 city regions only</option><option value=\"[Airport]Atlanta_Hartsfield_Jackson_International,[Airport]Chicago_O'Hare_International,[Airport]John_F_Kennedy_International,[Airport]Newark_Liberty_International,[Airport]Washington_Dulles_International\">--U.S. 5 airports only</option>";
		}
		
		
		cities.sort(function(a,b){return 2 * (a > b) - 1;})
			
		$.each(cities, function(i, city){
			html+="<option value=\""+city.split(': ')[1]+"\">"+city.replace(/\_/g, " ")+"</option>";
		})
		$target.html("<li><select>"+html+"</select></li>").find("select").change(function(){
			var val=$(this).val(),
				label=$(this).find("option:selected").text();
			show.report();
			
			//change the value in the comparison content
			$comparison.find(".inner h3").html(label);
			$comparison.find(".select select").val(val);
		})
		
		
		//menucities in the contentComparison
		$comparison.find(".inner h3").html(((app.labels[group])?app.labels[group]:group))
		$comparison.find(".select select").html(html).on("change", function(){
			var $this=$(this),
				value=$this.val(),
				label=$this.find("option:selected").text(),
				url=getRequestURL("getReport", {cities: value});
			
			$this.parent().siblings("h3").html(label);
			
			//$.getJSON(url, function(json){
				//console.log(json)
			//})
		})
		
	},
	
	//application
	application: function(data){
		if(data){
			var html='';
			$.each(data, function(i,o){
				html+="<li><a href='"+o.url+"' target='_blank'><i class='fa fa-angle-double-right'></i>"+o.name+"</a></li>";
			});
			$(".applications-menu").html(html).parent("li.treeview").show();
			
		}
	},
	
	//map
	mapData:function(mapData, keywords, sumData){
		var labels={
				"past1day":"Yesterday",
				"past7day":"Past 7 Days",
				"past30day":"Past 30 Days",
				"all":"All"
			};
		if(app.cityCircle){}
		
		if(app.cityCircle){app.cityCircle.clearLayers()}
		app.cityCircle=L.featureGroup().addTo(app.cityMap);
			
		
		//parse mapData and sumData
		var cityData=mapData.counts,
			active="count";
		if(mapData.cities&&sumData){
			var nav_html="", d;
			
			active="past7day";
			
			$.each(labels, function(k,label){
				nav_html+="<li class='"+((k==active)?"active":"")+"'><a href='#box-mapContent' data-toggle='tab' data-value='"+k+"'>"+label+"</a></li>"

				d=sumData[k];
				d.map(function(obj,i){
					if(mapData.cities[obj.value]){
						if(!mapData.cities[obj.value]["sumup"]){mapData.cities[obj.value]["sumup"]={}}
						
						mapData.cities[obj.value]["sumup"][k]={count:obj.count, filterCount:obj.filterCount}
						
						if(k=='all'){
							mapData.cities[obj.value]["count"]=obj.count
						}
					}
				})
			});
			
			cityData=[]
			$.each(mapData.cities, function(k, obj){cityData.push(obj);})
			
			var optionButton="<li><div class='btn-group'><button class='btn btn-sm btn-default dropdown-toggle' data-toggle='dropdown'>Options <span class='caret'></span></button><ul class='dropdown-menu' role='menu'><li><input type='checkbox' id='chk_map_filterData'/><span>Show Filtered Data</span></div></li>";
			$(".box-map ul.nav-tabs").html(nav_html+optionButton+"<li class='pull-left header'><i class='fa fa-map-marker'></i>Tweets in Cities</li>").find("li > a").click(function(){
				var type=$(this).attr("data-value");
				
				//clear all circles
				app.cityCircle.clearLayers();
				$(".box-map .box-map-table > table").html("");
				
				//show filter data?
				var isFilter=($('.box-map .icheckbox_minimal').hasClass('checked'))?true:false; 
				
				show.renderMapLayer(cityData, {target:type, showFilter: isFilter})
			})
			
			
			//icheck
			$('.box-map #chk_map_filterData').iCheck({
				checkboxClass: 'icheckbox_minimal',
				radioClass: 'iradio_minimal'
			}).on({
				"ifClicked": function(){
					//clear all circles
					app.cityCircle.clearLayers();
					$(".box-map .box-map-table > table").html("");
				},
				"ifChecked": function(){
					var type=$(".box-map ul li.active > a").attr('data-value');
					show.renderMapLayer(cityData, {target:type, showFilter: true})
				},
				"ifUnchecked": function(){
					var type=$(".box-map ul li.active > a").attr('data-value');
					show.renderMapLayer(cityData, {target:type, showFilter: false})
				}
			});
		}
		
		show.renderMapLayer(cityData, {target:active});
		
	},
	
	//render map layer
	renderMapLayer: function render(dataSource, options){
		if(!options){options={}}
		options.target=options.target || "all";
		options.showFilter=options.showFilter || false;
			
		var field=(options.showFilter)?"filterCount":"count",
			labels={
				"past1day":"Yesterday",
				"past7day":"Past 7 Days",
				"past30day":"Past 30 Days",
				"all":"All"
			},
			circles = app.cityCircle;
			
		//label for count
		labels.count="Total"
			
		var html="<tr><th class='left'>City</th><th>Radius</th><th>"+labels[options.target]+((options.showFilter)?" Filtered":"")+" Tweets</th><th>Population 2010</th><th>Tweets per 1,000,000 people</th></tr>",
			props, geometry, popupText,circle, color, radius,sumup;
		
		var counts = $.map(dataSource, function (item) { if(item["sumup"]){return item["sumup"][options.target][field]} });
			counts.sort(function(a, b) { return a - b; });
		var min = Math.min.apply(null, counts);
		var max = Math.max.apply(null, counts);
			
		//sort
		dataSource.sort(function(a,b){if(b["sumup"]&&a["sumup"]){return b["sumup"][options.target][field] - a["sumup"][options.target][field]}})			
		
		$.each(dataSource, function(i,v){
			if(v.sumup){
				geometry=v.geo;
				var name=v.name.replace(/\_/ig," "),
					sumup=v["sumup"],
					count=(sumup&&sumup[options.target]&&sumup[options.target][field]>=0)?sumup[options.target][field]:"N/A",
					standard=(v.pop2010>0&&count!='N/A')?((count/v.pop2010)*1000000):count;
					
				popupText = "<b>Name: </b> " + name + "<br><b>Radius: </b> " + v.radius + " miles<br><b>"+labels[options.target]+((options.showFilter)?" Filtered":"")+" tweets: </b> " + count+ "<br><b>Population in 2010:</b> "+addComma(v.pop2010)+"<br><b>Tweets per 1,000,000 people:</b> "+ standard.toFixed(2);//+$selector[0].outerHTML;
					
				color = "#" + Math.floor((Math.log(sumup[options.target][field] - min)/Math.log(max-min)) * 15).toString(16) + "00";
				//radius = ((standard-min)/(max-min))*300000; 
				radius = Math.sqrt(standard)*8000; 
				circle=new L.circle([geometry.coordinates[1], geometry.coordinates[0]], radius).bindPopup(popupText).setStyle({fillColor: color, fillOpacity: 0.85, weight: 2, color: '#444' });
				//circle=new L.circle([geometry.coordinates[1], geometry.coordinates[0]], v.radius * 1609.34).bindPopup(popupText).setStyle({fillColor: color, fillOpacity: 0.85, weight: 2, color: '#444' });
					
				circles.addLayer(circle);
				v.circle=circle;	
				
				//table
				html+="<tr id="+i+" ><td class='left'>"+name+"</td><td>"+v.radius+" miles</td><td>"+count+"</td><td>"+addComma(v.pop2010)+"</td><td>"+standard.toFixed(2)+"</td></tr>";
			}
		});
			
		//zooom to bounds
		app.cityMap.fitBounds(circles.getBounds());
			
		//show map table and write click event on each tr (except the first tr)
		$(".box-map .box-map-table > table").html(html).find("tr:not(:first-child)").click(function(){
			var $this=$(this),
				id=$this.attr("id"),
				obj=dataSource[id].circle;

			obj.openPopup();
		});
			
			
			
	},
	
	
	//table
	table:function(title, selector, data, options){
		if(!options){options={}}
		options.opengraph=options.opengraph || false;
		options.contentClass=options.contentClass || null;
		options.clickFunction=options.clickFunction || null;
		options.countClickFunction=options.countClickFunction || null;
		options.titleAnnotation=options.titleAnnotation || null;
		options.section=options.section || "dashboard";
		options.max=options.max || 10;
		
		var $selector=$(selector);
		
		//if data contains all, past30day, past7day, and past1day
		if(data.all&&data.all.length>0){
			$selector.addClass("nav-tabs-custom");
			var html_nav="<ul class='nav nav-tabs pull-right'>",
				html="<div class='tab-content no-padding'>",
				navLabel={
					past1day: "Yesterday",
					past7day: "Past 7 Days",
					past30day: "Past 30 Days",
					all:"All"
				},
				id="", value, active;
				
			$.each(navLabel, function(k,label){
				value=data[k];
				id=title.split("(")[0].split(" ").join("")+"_"+k;
				active=((k=='past7day')?"active":"");
				html_nav+="<li class='"+active+"'><a href='#"+options.section+"-"+id+"' data-toggle='tab' data-value='"+k+"'>"+label+"</a></li>";
				html+="<div id='"+options.section+"-"+id+"' class='tab-pane "+active+"' style='position:relative;'><table class='table table-striped'>";
				
				value=value.slice(0,options.max)
				
				$.each(value, function(i,v){
					if(i==0){
						html+="<tr><th style='width: 10px'>#</th><th>Content</th><th style='width:20px; '>Count</th></tr>";
					}

					if(options.opengraph){
						html+="<tr><td>"+(i+1)+"</td><td class='opengraph'><a href='"+v.value+"' target='_blank' class='link'>"+v.value+"</a></td>"
					}else{
						html+="<tr><td>"+(i+1)+"</td><td class=''>"+((options.contentClass)?"<a class='"+options.contentClass+"' data-value='"+v.value+"'>"+v.value+"</a>":v.value)+"</td>";
					}
					
					html+="<td><small class='badge pull-right bg-red' data-value='"+v.value+"'>"+v.count+"</small></td></tr>";
				})
				html+="</table>"+ ((value.length>10)?"<div class='expand-arrow'><center><i class='fa fa-arrow-circle-down'></i> More Results</center></div>":"")+"</div>";
			});
			html_nav+="<li class='pull-left header'><i class='fa fa-inbox'></i>"+title+((options.titleAnnotation)?("<span class='titleAnnotation'>"+options.titleAnnotation+"</span>"):"")+"</li></ul>";
			html+="</div>";
			$selector.html(html_nav+html).show();
			//$navbar.show();
		}
		
		//event when switch tab
		$selector.find("a[data-toggle='tab']").click(function(){
			var $this=$(this),
				targetDomID=$this.attr("href"),
				$target=$(targetDomID);
				
			if($target.length>0){
				var $opengraph=$target.find("td.opengraph"),
					$retweet=$target.find("a.showTweet-retweet");

				//show opengraph
				if($opengraph.length>0){readOpengraph($opengraph)}
				
				
				//show retweet
				if($retweet.length>0){readRetweet($retweet)};
			}
		})
		//init readopengraph
		var $activeTabpane=$selector.find(".tab-content > .tab-pane.active");
		if($activeTabpane.find("td.opengraph").length>0){readOpengraph($activeTabpane.find("td.opengraph"));}
		if($activeTabpane.find("a.showTweet-retweet").length>0){readRetweet($activeTabpane.find("a.showTweet-retweet"));}
		
		
		
		var countClickFx;
		if(options.clickFunction){
			if(options.contentClass){$selector.find("a."+options.contentClass).click(function(){
				app.timePeriod=$(this).parents('div.tab-pane').attr('id').split('_')[1];
				options.clickFunction($(this).attr("data-value"))
			});}
			countClickFx=options.clickFunction;
		}
			
		if(options.countClickFunction){
			countClickFx=options.countClickFunction;	
		}
		
		$selector.find(".badge").click(function(e){
			app.timePeriod=$(this).parents('div.tab-pane').attr('id').split('_')[1];
			countClickFx($(this).attr("data-value"));
		}).hover(function(){$(this).css("cursor","pointer");});

	},
	
	
	//chart
	chart2:function(data){
		
		var chartData=$.map(data.values, function(obj){
			var dates=obj.date.split("/"),
				date=dates[2]+"-"+dates[0]+"-"+dates[1];
			return {date:date, count:obj.tweets_yesterday}
		})

		
		/* Morris.js Charts */
	    // Sales chart
	    var area = new Morris.Area({
	        element: 'chart-trend',
	        resize: true,
	        data: chartData,
	        xkey: 'date',
	        ykeys: ['count'],
	        labels: ['Tweets'],
	        lineColors: ['#a0d0e0'],
	        hideHover: 'auto'
	    });
	    
	    //Donut Chart
	    var donut = new Morris.Donut({
	        element: 'sales-chart',
	        resize: true,
	        colors: ["#3c8dbc", "#f56954", "#00a65a"],
	        data: [
	            {label: "Download Sales", value: 12},
	            {label: "In-Store Sales", value: 30},
	            {label: "Mail-Order Sales", value: 20}
	        ],
	        hideHover: 'auto'
	    });
	    
	   
	    //Fix for charts under tabs
	    $('.box ul.nav a').on('shown.bs.tab', function(e) {
	        area.redraw();
	        donut.redraw();
	    });
	},
	
	
	//wordcloud
	wordcloud:function(data, selector, options) {
			var $target=$(selector)
	
			//options
			if(!options){options={}}
			options.section=options.section || "dashboard";
	
			var content=(data.all)?data.all:data
			
			//insert html
			$target.html("<ul class='nav nav-tabs pull-right'></ul>"+
						 "<div class='box-body no-padding tab-content' id='"+options.section+"-wordCloudTabContent'></div>"+
						 "<div class='row'><div class='col-sm-12'>"+
							"<h4>Vocabulary Frequency Table</h4>"+
							"<div id='"+options.section+"-bar-wordcloud' class='chart wordcloudChart' style='height:350px; '></div>"+
						 "</div></div>");
			
			
			if(data.all){
				//nav bar
				var $nav=$target.find('ul.nav-tabs'),
					html_nav="",
					navLabel={
						past1day: "Yesterday",
						past7day: "Past 7 Days",
						past30day: "Past 30 Days",
						all:"All"
					},active;
			
				$.each(navLabel, function(k,label){
					active=(k=='past7day')?"active":"";
					html_nav+="<li class='"+active+"'><a href='#"+options.section+"-wordCloudTabContent' data-toggle='tab' data-wordCloud='"+k+"'>"+label+"</a></li>";						
				});
				$nav.html(html_nav+"<li class='pull-left header'><i class='fa fa-inbox'></i>Word Cloud</li></ul>").find("a[data-toggle='tab']").click(function(){
					var type=$(this).attr('data-wordCloud');
					if(type&&type!=""){
						createWordCloud(data[type]);
					}
				});
			}
			
			
			createWordCloud(content)
			
			
			//create word cloud
			function createWordCloud(cloudtext){
				var $content=$target.find(".box-body"),
					width =$content.width(), //400,
					height =400,
					colors = d3.scale.category20b(),
					maxcount = 0;
				
				
				//calculate max count
				for (var indx in cloudtext){
					if (cloudtext[indx].count > maxcount)  { maxcount = cloudtext[indx].count;}
				}
			
				$content.html("<center><img src='images/loading.gif' /></center>");
				if (!app.wordcloud) {
						app.wordcloud = d3.layout.cloud().size([width, height])
							.words(cloudtext.map(function(d) {return {text: d.value, size: Math.sqrt(d.count/maxcount *100)*8};}))
							.rotate(function() { return ~~(Math.random() * 1) * 90; })
							.font("Arial")
							.spiral("archimedean")
							//.spiral("rectangular")
							.fontSize(function(d) { return d.size; })
							.on("end", draw)
							.start();
				} else {
						app.wordcloud.stop()
						.words(cloudtext.map(function(d) {return {text: d.value, size: Math.sqrt(d.count/maxcount *100)*8};}))
						.on("end", draw)
						.start();
				}
				
				
				//draw bar chart
				$target.find("#"+options.section+"-bar-wordcloud").html("").off("click");
				var bar = new Morris.Bar({
					element: options.section+'-bar-wordcloud',
					resize: true,
					data: cloudtext.slice(0,19), //only top 20 keywords
					barColors: ['#00a65a'],
					xkey: 'value',
					ykeys: ['count'],
					labels: ['Frequency'],
					hideHover: 'auto',
					axes:true
				}).on("click", function(i, row){
					app.timePeriod=$nav.find("li.active > a").attr("data-wordCloud");
					var word=row.value;
					show.dataTable({texts:word}, "Tweets contain <B>'"+word+"'</b> keyword", {highlightKeywords:[word]})
				});
				
				
				//draw word cloud
				function draw(words) {
					$content.html("");
					d3.select($content.selector).append("svg")
						.attr("width", width)
						.attr("height", height)
						.attr("style", "border-color:lightgray;border-style:solid;border-width:1px;")
						.append("g")
						.attr("transform", "translate(" + (width/2) + "," + (height/2) + ")")
						.selectAll("text")
						.data(words)
						.enter().append("text")
						.style("font-size", function(d) { return d.size + "px"; })
						.style("font-family", "Impact")
						.style("fill", function(d, i){return colors(i)})
						.attr("text-anchor", "middle")
						.attr("transform", function(d) {
							return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
						})
						.text(function(d) { return d.text; });
						
					//$("text").css("fill", function() { return colors(this.__data__.text.toLowerCase()); })
						
					$("text").click(function() {
						app.timePeriod=$nav.find("li.active > a").attr("data-wordCloud")
						var word=this.__data__.text;
						show.dataTable({texts:word}, "Tweets contain <B>'"+word+"'</b> keyword", {highlightKeywords:[word]})
					}).css("cursor", "pointer")
					//.mouseover(function() { $(this).css("fill", "#cc2222"); })
					.mouseover(function() { $(this).css("fill", "#22aa22"); })
					.mouseout(function() { $(this).css("fill", colors(this.__data__.text.toLowerCase())); });
				}
			}
			
	},
	
	//data table
	dataTable: function(params, title, options){
		if(!params || $.isEmptyObject(params) || !(params instanceof Object)){console.log("[ERROR] show.dataTable: no url params"); return;}
		
		//url params
		params['sort']='created_at_local'
		var url=getRequestURL('getTweet', params);
		
		var $target=$("#popupDataTable");
		$target.find(".modal-body #dataTable").html("<center><img src='images/loading.gif' /></center>")
		$target.find(".modal-header h4").html(title);
		$target.modal({show:true})
		
		//query to get json			
		$.getJSON(url, function(data){
			var $dataTable=$("#popupDataTable .modal-body #dataTable");
		
			if(!options){options={}}
			options.highlightKeywords=options.highlightKeywords || []
			
			
			if (app.dataTable) {
				app.dataTable.fnDestroy();
				//if there is a exiting dataTable, we need to destroy first. Otherwise, the dataTable will read the previvous one to make errors.
				$dataTable.html("");
			}
			
			
			//reformat data into dataTable format
			var dataTable={
				columns:[{"sTitle": "#"}],
				datas:[]
			}, fields=["created_at_local", "username", "text", "source", "userLocation", "city"], value=null;
			$.each(data, function(i,obj){
				obj["username"]=obj["user"]["name"];
				obj["city"]=obj["search_info"]["search_areas"][0]["name"].replace(/\_/g, " ") || "";
				obj["userLocation"]=obj.user.location || "" 
				
				var datas=[(i+1)];
				
				$.each(fields, function(j, field){
					if(i==0){
						dataTable.columns.push({"sTitle": field.toUpperCase()});
					}
					
					value=obj[field]
					
					if(field=='text'){
						//linkify
						value=pathgeo.util.linkify(value);
						
						//highlight keyword
						if(options.highlightKeywords.length>0){
							value=pathgeo.util.highlightKeyword(options.highlightKeywords, value)
						}
					}
					if(field=='source'){value=$(value).text();}
					if(field=='username'){value="<a href='https://twitter.com/"+obj.user.screen_name+"/status/"+obj.id+"' target='_blank'>"+obj.username+"</a>";}
					if(field=='created_at_local'){value=value.split(".")[0].replace("T"," ")}
					
					datas.push(value)
				});
				dataTable.datas.push(datas)
			});
	
			//hide loading
			$dataTable.html("");
			
			//init app.dataTable
			app.dataTable = $dataTable.dataTable({
				"bDestroy" : true, //destroy current object if one exists
				"aaData" : dataTable.datas, //data
				"aoColumns" : dataTable.columns, //column
				"bJQueryUI" : false,
				"bAutoWidth" : true,
				"bPaginate" : false,
				"sPaginationType" : "two_button", //"full_numbers",    //page number
				"sScrollY" : $(window).height()-350,
				"sScrollX" : "100%",
				"bDeferRender": true,
				"oLanguage" : {
					"sSearch" : ""
				},
				"iDisplayLength" : 1000,
				"sDom" : '<"dataTable_toolbar"<"dataTable_tools"if<"dataTable_info_msg">>><"dataTable_table"rtS<>>', //DOM
				"fnInitComplete" : function(oSettings, json) {
					var searchWait = 0;
					var searchWaitInterval;
					$("#" + oSettings.sTableId + "_filter input")
						.attr({
							"title" : "Filter data results by keyword",
							"placeholder" : "Filter data results by keyword"
						})
						.prop("type", "search")
						//.textinput()
						//delay filter to increase performance from http://stackoverflow.com/questions/5548893/jquery-datatables-delay-search-until-3-characters-been-typed-or-a-button-clicke
						.unbind('keypress keyup')
						.bind('keypress keyup', function(e){
						    var item = $(this);
						    searchWait = 0;
						    if(!searchWaitInterval){
								searchWaitInterval = setInterval(function(){
									if (searchWait >= 3) {
										clearInterval(searchWaitInterval);
										searchWaitInterval = '';
										searchTerm = $(item).val();
										app.dataTable.fnFilter(searchTerm);
										searchWait = 0;
									}
									searchWait++;
								}, 100);
							}
						});
					
					//show info msg
					$(".dataTable_info_msg").html("(Only show Top 1000 entries)")
					
					
					setTimeout(function(){
						//ajust column width
						app.dataTable.fnAdjustColumnSizing();
					}, 100)
				},
				"fnRowCallback" : function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
	
				},
				fnDrawCallback : function(oSettings) {
					$dataTable.find("a").attr("target","_blank");
					//app.dataTable.fnAdjustColumnSizing();
				}//end drawCallback
			});
			// end init dataTable
			
			
			
			
		
		}); 

	},
	
	
	//trend, timeseries data
	trend: function(data, selector, options){
		//options
		if(!options){options={}}
		options.section=options.section || "dashboard";
		options.globalVariable=options.globalVariable || app.trend.data;
		
		
		var $selector=$(selector);
		
		//create dom element
		$selector.html(
			"<ul class='nav nav-tabs pull-right'>"+
				"<li><a href='#"+options.section+"-trendMonthly' data-toggle='tab' chart-target='monthlyChart'>Monthly</a></li>"+
				"<li><a href='#"+options.section+"-trendWeekly' data-toggle='tab' chart-target='weeklyChart'>Weekly</a></li>"+
				"<li class='active'><a href='#"+options.section+"-trendDaily' data-toggle='tab' chart-target='dailyChart'>Daily</a></li>"+
				"<li><div class='btn-group'>"+
					"<button class='btn btn-sm btn-default dropdown-toggle' data-toggle='dropdown'>Options &nbsp; <span class='caret'></span></button>"+
					"<ul class='dropdown-menu' role='menu' style='width:200px; '>"+
						"<li><b>Current Data</b></li>"+
						"<li><input type='radio' name='radio_currentData' value='unfiltered' /><span>Only Original Tweets</span></li>"+
						"<li><input type='radio' name='radio_currentData' value='filtered' /><span>Only Filtered Tweets</span></li>"+
						"<li><input type='radio' name='radio_currentData' value='both' checked /><span>Show Both </span></li>"+
						//"<li></li>" + //<b>Historical Data</b></li>"+
						"<li class='loadingHistorical'><img src='images/loading.gif' / >&nbsp; Loading Historical Data...</li>"+
						"<li><hr><input type='checkbox' value='historical' disabled /><span>Show Historical Data</span></li>"+
						//"<li><input type='radio' name='radio_historicalData' value='historical' /><span>Show Historical Data</span></li>"+
						//"<li><input type='radio' name='radio_historicalData' value='filteredHistorical' /><span>Show Historical Filtered Data</span></li>"+
						//"<li><input type='radio' name='radio_historicalData' value='none' checked /><span>Remove Historical Data</span></li>"+
					"</ul></div></li>"+
				"<li class='pull-left header'><i class='fa fa-inbox'></i>Trend</li>"+
			"</ul>"+
			"<div class='tab-content no-padding'>"+
				"<div id='"+options.section+"-trendDaily' class='chart tab-pane active' style='position:relative; height:360px; '></div>"+
				"<div id='"+options.section+"-trendWeekly' class='chart tab-pane' style='position:relative; height:360px; '></div>"+
				"<div id='"+options.section+"-trendMonthly' class='chart tab-pane' style='position:relative; height:360px; '></div>"+
			"</div>"
		)
	
		//enable iradio minimal
		$selector.find("input").iCheck({
			checkboxClass: 'icheckbox_minimal',
			radioClass: 'iradio_minimal'
		});
	
	
		//remove all html inside charts
		$selector.find(".chart").html("");
		
		
		app.trend.data=parse.trendData(data, {
			onHistoricalDataReady: function(output){
				//enable iradio_minimal
				$selector.find(".iradio_minimal, .icheckbox_minimal").iCheck('enable');
				$selector.find(".icheckbox_minimal").parent('li').show();
				$selector.find("li.loadingHistorical, #trendLoading").hide();
			},
			onHistoricalDataError: function(){
				console.log('no historical data')
				
				$selector.find("li.loadingHistorical, #trendLoading").hide();
				$selector.find(".icheckbox_minimal").iCheck("disable");
				$selector.find(".icheckbox_minimal").parent('li').hide();
			}
		})
		
		console.log(app.trend.data)
		
		//draw the chart based on the data we got currently
		//when loading historical data is done, the chart will be refresh again to draw the historical data.
		show.trendChart("dailyChart", {domID:options.section+"-trendDaily"});
		
		
		//the click event of showHistorical checkbox
		$selector.find(".iradio_minimal").on({
			"ifChecked": function(){
				//switch Chart
				parse.switchTrendChart($selector)
			
			},
			"ifUnchecked": function(){
				
			}
		});
		
		
		//icheckbox event
		$selector.find(".icheckbox_minimal").on({
			"ifChecked": function(){
				//switch Chart
				parse.switchTrendChart($selector);
			},
			"ifUnchecked": function(){
				//switch Chart
				parse.switchTrendChart($selector)
			}
		
		})
		
		
		//only draw chart after the tab is shown. Otherwise, the chart will not show properly. 
		$selector.find(".nav-tabs li a[data-toggle='tab']").on('shown.bs.tab', function (e) {
			//switch Chart
			parse.switchTrendChart($selector);
		})
	
	},
	
	
	//chart
	trendChart:function(type, options){
		if(!type||type==""){console.log("[ERROR] show.trendChart: no type. Please check again"); return; }
		
		//options
		if(!options){options={}}
		options.domID=options.domID || null
		options.chartSeries=options.chartSeries || ['unfilter', 'filter']
		
		//variables
		var orders=['unfilter','filter','historical_unfilter','historical_filter'], //based on the sequence of unfilter, filter, historical_unfilter, historical_filter of the dailyChart values
			visibility=orders.map(function(v,i){
				var output=false
				$.each(options.chartSeries, function(j,s){
					if(s==v){
						output=true
					}
				})
				return output
			}),
			dataSource=app.trend.data;

		
		switch(type){
			case "dailyChart":
				app.trend.dailyChart = g = new Dygraph(
					document.getElementById((options.domID || "dashboard-trendDaily")), 
					dataSource.daily.values, //dataSource.values, 
					{
						labels: dataSource.daily.headers, // //dataSource.headers,
						customBars: false,
						title: '',
						ylabel: '',
						colors: dataSource.daily.colors.slice(1,5),//['#00C0EF', '#00A65A', '#bbbbbb', '#F39C12'], 
						visibility:visibility, 
						showRangeSelector: true,
						highlightCircleSize: 5,
						rangeSelectorHeight: 50,
						labelsDivWidth: 100,
						labelsDivStyles: {
							'textAlign': 'right'
						},
						labelsDivStyles: {
							'backgroundColor': 'rgba(255, 255, 255, 0.75)',
							'padding': '4px',
							'border': '1px solid grey',
							'borderRadius': '5px',
							'boxShadow': '2px 2px 2px #888',
							'width': '110px'
						},
						strokeWidth: 2,
						legend: 'always',
						hideOverlayOnMouseOut: true,
						underlayCallback: function(canvas, area, g) {
							// Search rank 3 for highlight columns
							var rank = function(obj){
								var xRange = obj.xAxisRange(),
									rank = [],
									maxRank=3; 
								
								for (var ii=0; ii<maxRank; ii++) {
									var maxValue = 0;
									var maxPosition = {position: -1, series: 0};
									for (var i=0; i<g.numRows(); i++) {
										if (obj.getValue(i,0) < xRange[0]) continue;    // for rangeSelector
										if (obj.getValue(i,0) > xRange[1]) continue;    // for rangeSelector
										var ranked = false;
										for (var jj=0; jj<ii; jj++) {
											if (rank[jj].position == i) {
												ranked = true;
												break;
											}
										}
										if (ranked) continue;
										var highValue = 0;
										var series = 0;
										for (var j=1; j<obj.numColumns(); j++) {
											var value = obj.getValue(i,j)//.toString();//.split(",")[1]*1;
											if (highValue < value) {
												highValue = value;
												series = j - 1;
											}
										
										}
										
										if (maxValue < highValue) {
											maxValue = highValue;
											maxPosition = {position: i, series: series};
										}
									}
								
									rank.push(maxPosition);
								}
								return rank;
							}(g);
							
							
							//alert(rank[0]+" "+rank[1]+" "+rank[2]);
							
							// Draw rectangle top 3
							app.highlightDates=[];
							
							for (var ii=0; ii<rank.length; ii++) {
								var i = rank[ii].position;
								var series = rank[ii].series;
								if (i < 0) continue;    // length of selected top3 data is less then 3
								var highValue = 0;
								var lowValue = Number.MAX_VALUE;
								for (var j=1; j<g.numColumns(); j++) {
									var value = g.getValue(i,j);//.toString().split(",")[1]*1;
									if (lowValue > value) lowValue  = value;
									if (highValue < value) highValue = value;
								}
								if (highValue > 0) {
									//var bottom_left = g.toDomCoords(g.getValue(i,0), lowValue);
									var bottom_left = g.toDomCoords(g.getValue(i,0), 0);
									var top_right = g.toDomCoords(g.getValue(i,0), highValue);
			
									var bottom = bottom_left[1];
									var left   = bottom_left[0]-10;					
									var top    = top_right[1];
									var right  = top_right[0]+10;
									
									canvas.fillStyle = "rgba(255, 255, 102, 0.6)";

									
									canvas.fillRect(left, area.y, right - left, area.h);
									//canvas.fillRect(left, bottom, right-left, top-bottom);
															
									var date = new Date(g.getValue(i,0));
								
									app.highlightDates.push(date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate());
									
									
									//highlight dates to get top url on that date
									// highlightDates.push({
		// 						
										// date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate()			
									// })
									
									
									var shortText = date.toDateString();
									canvas.font="bold 12px Arial";
									canvas.fillStyle = g.getColors()[series];
									canvas.fillText("["+(ii+1)+"] "+shortText.substring(0,shortText.length-5), right, top);
								}
							}
							
						},
						pointClickCallback: function(e, point){
							var results=dataSource.daily.values[point.idx],
								yval=point.yval;
							
							if(results&&results.length>0){
								var date=results[0],
									unfilter=results[1],
									filter=results[2],
									historical_unfilter=results[3],
									historical_filter=results[4],
									endDate=null,
									startDate="";
								
								startDate=date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate();
								endDate=moment(startDate).add('day',1).toDate();//new Date(date.getTime() + (24*60*60*1000))
								endDate=endDate.toISOString().split('T')[0];//getFullYear()+"-"+(endDate.getMonth()+1)+"-"+endDate.getDate();
								
								
								//if click on the filtered tweets, make the url params, removeRT and removeURL, true!
								var params={startDate: startDate, endDate: endDate};
								if(yval==filter){
									params.removeRT=2;
									params.removeURL=2;
									params.machineLearning=(app.topic=='flu')?true:false; //only flu has machineLearning
								}
								
								//show dataTable
								if(yval!=historical_unfilter && yval!=historical_filter){
									var keywords=$("ul.keywords-menu input:checked").map(function(){return this.value}).get();
									keywords.push(app.topic.replace(/\_/g," "))
									
									show.dataTable(params, "Tweets on <b>"+startDate+"</b> about "+ app.topic, {highlightKeywords: keywords});
								}
							}
							
						}
						
					}
				);
				
				var dailyChart=app.trend.dailyChart;
				dailyChart.ready(function() {
					var day=30;
					var sIndex = dailyChart.numRows()- day;
					var eIndex = dailyChart.numRows()- 1;
					if (sIndex < 0) sIndex = 0;
					if (eIndex < 0) eIndex = 0;
					dailyChart.updateOptions({
						dateWindow: [dailyChart.getValue(sIndex,0), dailyChart.getValue(eIndex,0)]
					});
					
					//get top 1 webpage on the highlighted date
					//showTop1Webpage(app.highlightDates);
					
				});
			break;
			
			case "weeklyChart":
			case "monthlyChart":
				var charts={
						"weeklyChart": {key:"weekly", domID:options.domID || "dashboard-trendWeekly", color:"#00a65a"}, 
						"monthlyChart":{key:"monthly", domID:options.domID || "dashboard-trendMonthly", color:"#f39c12"}
					}, 
					c=charts[type],
					series={
						"filter":{color:"#00a65a", label:"Filtered Tweets"},
						"unfilter":{color:"#00c0ef", label:"Tweets"},
						"historical_filter":{color:"#bbbbbb", label:"Filtered Tweets in 2013"},
						"historical_unfilter":{color:"#bbbbbb", label:"Tweets in 2013"}
					};
				
				app.trend[type] = new Morris.Bar({
					element: c.domID,
					resize: true,
					data: $.map(dataSource[c.key], function(obj, k){
						return {date: obj.display, unfilter:obj.unfilter, filter:obj.filter,  historical_filter:obj.historical_filter, historical_unfilter:obj.historical_unfilter}
					}), 
					barColors: options.chartSeries.map(function(v,i){return series[v].color}), 
					xkey: 'date',
					ykeys: options.chartSeries, 
					labels: options.chartSeries.map(function(v,i){return series[v].label}),
					hideHover: 'auto',
					axes:true
				});
				
			
			break;
		
		}

	},

	
	//carousel
	carousel:function(title, selector, data, options){
		if(!options){options={}}
		options.contentClass=options.contentClass || null;
		options.clickFunction=options.clickFunction || null;
		options.countClickFunction=options.countClickFunction || null; 
		options.section=options.section || "dashboard";
		options.max=options.max || 20;
		
		var $selector=$(selector);
		
		//insert html
		$selector.html("<ul class='nav nav-tabs pull-right'></ul>"+
					   "<div id='"+options.section+"-carouselContent' class='tab-content no-padding'>"+
					     "<div id='"+options.section+"-carouselMain' class='owl-carousel'></div>"+
					   "</div>");
					   
		var $carouselMain=$selector.find(".owl-carousel"),
			$nav=$selector.find("> ul.nav-tabs");
		
		//if data contains all, past30day, past7day, and past1day
		if(data.all&&data.all.length>0){
			$selector.addClass("nav-tabs-custom");
			var html_nav="",
				navLabel={
					past1day: "Yesterday",
					past7day: "Past 7 Days",
					past30day: "Past 30 Days",
					all:"All"
				},
				id="", value, active;
			
			//nav bar
			$.each(navLabel, function(k,label){
				value=data[k];
				id=title.split("(")[0].split(" ").join("")+"_"+k;
				//active=((k=='past7day')?"active":"");
				active=((k=='all')?"active":"");
				html_nav+="<li class='"+active+"'><a href='#"+options.section+"-carouselContent' data-toggle='tab' data-value='"+k+"'>"+label+"</a></li>";
			});
			html_nav+="<li class='pull-left header'><i class='fa fa-inbox'></i>"+title+"</li></ul>";
			$nav.html(html_nav).find("li > a[data-toggle='tab']").off('click').click(function(){
				var value=$(this).attr('data-value');
				if(value&&value!=""){
					createCarousel(data[value].slice(0, options.max));
				}
			});
			
			//createCarousel(data['past7day'].slice(0, options.max))
			createCarousel(data['all'].slice(0, options.max))

			$selector.show();
		}
		
		
		//create carousel html
		function createCarousel(content){
		
			var html=content.map(function(obj){return "<div class='item'><img src='"+obj.value+"' /><div class='item-count' title='Tweet Counts'>"+obj.count+"</div><div class='item-description'><a href='"+obj.value+"' target='_blank'>"+obj.value+"</a></div></div>";}),
				owl=$selector.find(".owl-carousel").data('owlCarousel');
				
			if(owl){owl.destroy();}
			
			//carousel
			$carouselMain.html(html).owlCarousel({
				items : 2,
				itemsDesktop      : [1199,2],
				itemsDesktopSmall     : [979,2],
				itemsTablet       : [768,2],
				itemsMobile       : [479,2],
				autoPlay:5000,
				stopOnHover:true,
				navigation : false,			
				//singleItem:true,
				slideSpeed : 1000,
				pagination:true,
				afterAction : null,
				responsiveRefreshRate : 200,
			}).find(".item img").off('click').click(function(){
				var url=$(this).attr('src'),
					params={media: url};
				
				//if instagram, need to query url not media
				if(url.split(/\/media$/).length>1){url=url.split(/\/media$/)[0]+"/"; params={url:url}};
				
				if(options.clickFunction){
					options.clickFunction(params, url);
				}
			})
		}
		
		
		/**
		var countClickFx;
		if(options.clickFunction){
			if(options.contentClass){$selector.find("a."+options.contentClass).click(options.clickFunction);}
			countClickFx=options.clickFunction;
		}
			
		if(options.countClickFunction){
			countClickFx=options.countClickFunction;	
		}
		
		$selector.find(".badge").click(function(e){
			app.timePeriod=$(this).parents('div.tab-pane').attr('id').split('_')[1];
			countClickFx($(this).attr("data-value"));
		}).hover(function(){$(this).css("cursor","pointer");});
		*/
	},
	
	//tweet layer
	tweetLayer: function(){
		//get tweet geojson
		/**
		$.getJSON("getTweet/"+app.topic+"?format=geojson", function(json){
			if(json&&!json.error){
				var geojsonLayer=new L.geoJson(json, {
						
					
					
				})//.addTo(app.map)
			
			}
		
		})
		*/
	
	},
	
	//comparison trend chart
	comparison: function(json){
		//test mode
		if(app.testmode&&json){

			//show content
			var $content=$("#contentComparison"),
				ids=["sectionComparisonLeft", "sectionComparisonRight"],
				targets=[
					{key: "trend", target:".box-trend", label:"Trend", show:function(v, selector, section){show.trend(v, selector, {section:section});}},
					{key: "wordCloud", target:".box-wordcloud", label:"Word Cloud", show:function(v, selector, section){show.wordcloud(v, selector, {section:section});}},
					{key: "topURLs", target:'.box-topURL', label:'Top URL', show:function(v, selector, section){show.table("Top URL", selector, v, {opengraph:true, titleAnnotation:"(The Most Referred Web Pages)", max:5, section:section, clickFunction:function(value){show.dataTable({url:value}, "Tweets contain <b>"+value+"</b>", {highlightKeywords:[value]})}});}},
					{key: "topHashtags", target:".box-topHashtag", label:"Top Hashtags", show:function(v, selector, section){show.table("Top Hashtags", selector, v,{contentClass:'showTweet-hashtag', max:5, section:section, clickFunction:function(value){show.dataTable({hashtags:value}, "Tweets contain <b>"+value+"</b> hashtags", {highlightKeywords:["#"+value]});}});}},
					{key: "topMentions", target:".box-topMention",label:"Top Mentions", show:function(v, selector, section){show.table("Top Mentions", selector, v, {contentClass:'showTweet-mention', max:5, section:section, clickFunction:function(value){show.dataTable({mentions:value}, "Tweets mention <b>"+value+"</b>", {highlightKeywords:["@"+value]});}});}},
					{key: "topRetweets", target:".box-topRetweet", label:"Top Retweet", show:function(v, selector, section){show.table("Top Retweets", selector, v, {contentClass:'showTweet-retweet', max:5, section:section, clickFunction:function(value){show.dataTable({retweeted_id:value}, "Tweets retweet <b>"+value+"</b>", {highlightKeywords:[value]});}});}},
					{key: "topMedia", target:".box-topMedia", label:"Top Media", show:function(v, selector, section){show.carousel("Top Media", selector, v, {contentClass:'showTweet-media', max:5, section:section, clickFunction:function(params, value){show.dataTable(params, "Tweets contain <b>"+value+"</b> media", {highlightKeywords:[value]});}});}},
					//{key: "map", target:".box-map", label:"Top Cities"}
				],
				$obj;
			
			$.each(ids, function(i,id){
				$obj=$content.find("#"+id);
				
				$.each(targets, function(j,obj){
					//create dom
					$obj.append("<div class='box nav-tabs-custom "+obj.target.split(".")[1]+"'></div>");
					
					var result=json.results[obj.key];
					if(result){
						if(obj.show){
							obj.show(result, "#"+id+" "+obj.target, id)
						}
					}
					
				})
				
				
				
				
			});
				
		}
	}

}



//parse data
var parse={
	trendData: function(data, options){
		//options
		if(!options){options={}}
		options.onHistoricalDataReady= options.onHistoricalDataReady || null;
		options.onHistoricalDataError= options.onHistoricalDataError || null;
	
		var output={
			daily:{
				headers:['Date', 'Tweets', 'Filtered', 'Tweets in 2013', 'Filtered Tweets in 2013'],
				values:[],
				colors:[null, '#00C0EF', '#00A65A', '#bbbbbb', '#bbbbbb']
			},
			weekly:{},
			monthly:{}
		};
		
		//parse current data
		//parse data and put into target.value
		var value, 
			dateFormats={"weekly": {parseFormat:"wo", startOf:"week", displayFormat:"wo (MM-DD-YY)"},  "monthly": {parseFormat: "MMM", startOf:"month", displayFormat:"MMM, YYYY"}}, 
			daily=output.daily;
			
		$.each(data, function(i,obj){
			value=obj["count"];
			filterValue=obj["filterCount"];
			if(i==data.length-1){value=null; filterValue=null}
				
			var mdate=moment(obj["date"]);
			
			//daily data
			daily.values.push([mdate.local().toDate(), value, filterValue, null, null])
			
			//calculate weeks and month
			$.each(dateFormats, function(k, v){
				var time=mdate.format(v.parseFormat);
				if(!output[k][time]){output[k][time]={display:moment(mdate).startOf(v.startOf).format(v.displayFormat), unfilter:0, filter:0, count:0, historical_filter:0, historical_unfilter:0}}
				output[k][time].unfilter+=value;
				output[k][time].filter+=filterValue;
				output[k][time].count++;
			});
		});
		

		//get historical data 
		//if(!output.historical){
			//get json
			$.getJSON(getRequestURL("group", {groupBy:"created_at_local"}), function(json){
				if(json&&!json.error&&!json.errmsg){
					var years={};
					
					//parse historical data
					var dates, date, year, count, filterCount;
					$.each(daily.values, function(i,obj){
						dates=moment(obj[0]).add(1,"days").toISOString().split('T')[0].split('-')  //shift one day to match week days and weekends (only working in 2013 and 2014)
						year=parseInt(dates[0])-1;
						date=year+'-'+dates[1]+"-"+dates[2];
						
						if(json[date]){
							count=json[date].count;
							filterCount=json[date].filterCount;

							daily.values[i][3]=count;
							daily.values[i][4]=filterCount;
							
							//calculate weekly and monthly
							var mdate=moment(obj[0]);
							$.each(dateFormats, function(k, v){
								var time=mdate.format(v.parseFormat);
								
								output[k][time].historical_unfilter+=count;
								output[k][time].historical_filter+=filterCount;
							});
						}
					});
			
					/**
					//replace labels in the historical_filter and historical_unfilter object
					$.each(daily.headers, function(i,label){
						if(label.indexOf('{year}')!=-1){
							daily.headers[i]=label.replace('{year}', year)
						}
					})
					*/
					
					//show historical data in two more weeks
					var mDate=moment(daily.values[daily.values.length-1][0]),
						num=14, v,fv;
					for(var j=0; j<num;j++){
						mDate=moment(mDate).add(1, "days");
						year=parseInt(mDate.format('YYYY'))-1;
						targetDate=year+'-'+mDate.format('MM')+"-"+mDate.format('DD');
						v=null;
						fv=null;
						
						if(json[targetDate]){
							f=json[targetDate].count;
							fv=json[targetDate].filterCount
						}
						
						//daily
						daily.values.push([mDate.local().toDate(), null, null, v, fv])
					}

					//callback
					if(options.onHistoricalDataReady){
						options.onHistoricalDataReady(output);
					}
				}else{
					//callback on error
					if(options.onHistoricalDataError){
						options.onHistoricalDataError();
					}
				}
				

			}).error(function(){  //if getjson get some error, still draw the trend chart
				//callback on error
				if(options.onHistoricalDataError){
					options.onHistoricalDataError();
				}
			});
		//}
		
		
		return output
	},
	
	
	//historical and filter data
	switchTrendChart: function($selector){
		//set time out to ensure the checked class is added
		setTimeout(function(){
			var $a=$selector.find(".nav-tabs li.active > a"),
				dom=$a.attr('href'),
				domID=dom.split("#")[1],
				chartType=$a.attr('chart-target'),
				filterValue=$selector.find(".iradio_minimal.checked > input").attr("value"),
				$checkbox=$selector.find(".icheckbox_minimal"),
				showHistorical=$checkbox.hasClass("checked"),
				chartSeries=['unfilter', 'filter'];
				

			$checkbox.iCheck('enable');
			$(dom).html("");
				
			switch(filterValue){
				case "filtered":
					chartSeries=['filter'];
					if(showHistorical){chartSeries.push('historical_filter')}
				break;
				case "unfiltered":
					chartSeries=['unfilter']
					if(showHistorical){chartSeries.push('historical_unfilter')}
				break;
				case "both":
					$checkbox.iCheck('disable')
				break;
			}
		
			
			show.trendChart(chartType, {domID:domID, chartSeries:chartSeries})	
		}, 5)
		
		
	}



}





//get request url
function getRequestURL(type, params){
	if(!params){params={}}
	
	//time period. Detect the startDate
	if(app.timePeriod&&!params["startDate"]){
		var mToday=moment().utc(), startDate,
			dates={
				"all":null,
				"past1day":moment(mToday).subtract(1,'days'),
				"past7day":moment(mToday).subtract(7,'days'),
				"past30day":moment(mToday).subtract(30,'days')
			};
			
		if(dates[app.timePeriod]){
			params['startDate']=dates[app.timePeriod].format('YYYY-MM-DD');
		}
		app.timePeriod=null;
	}
	
	//keywords, removeRT, removeURL, removeDuplicate, city
	var $checks=$(".refreshTopic").find("input:checked");
			
	//get keywords
	var keywordCheckNum=0;
	if(!params["keywords"]){
		params["keywords"]=$checks.filter("[data-type='keyword']").map(function(){keywordCheckNum++; return this.value}).get().join(",");
	}
	
	//get removes from checkbox
	removes={
		"removeRT":false,
		"removeURL":false,
		"removeDuplicate":false
	}
	$checks.filter("[data-type!='keyword']").map(function(){if(this.value=='removeRT' || this.value=='removeURL'){removes[this.value]=2;}else{removes[this.value]=true;}});
	$.each(removes, function(k,v){if(v){params[k]=v}})
	
	//cities
	var city=$(".cities-menu select").val();
	if(!params["cities"]&&city!='none'){params["cities"]=city}
	
	console.log(params)

	var url="";
	switch(type){
		case "getTweet":
			params["token"]=app.user.token
			url=type+"/"+app.topic+"?"+$.map(params, function(v,k){if(v&&v!=""){return k+"="+encodeURIComponent(v)}}).join("&");
		break;
		case "getReport":
			//past 90 day
			var past90day=moment().subtract(90,'days').format("YYYY-MM-DD");
			params["startDate"]=past90day;
			url="getReport/"+app.topic+"?"+$.map(params, function(v,k){if(v&&v!=""){return k+"="+encodeURIComponent(v)}}).join("&")+"&limit=50000000"

			//if user wants to return back to default(e.g. all cities, !removeRT, !removeURL, all keywords), then directly read from json file.
			if(city=='none'&&removes.removeURL==false&&removes.removeRT==false&&keywordCheckNum==$(".keywords-menu input[data-type='keyword']").length){
				url="db/topic_"+app.topic+".json";
			}
		break;
		case "group":
			var archiveTopic="", keyword="";
			switch(app.topic){
				case "flu":
					archiveTopic="archive_public_health"
					params["keywords"]="flu";
				break;
				case "whooping_cough":
					archiveTopic="archive_public_health"
					params["keywords"]="whooping cough";
				break;
			}
			url='group/'+archiveTopic+"?"+$.map(params, function(v,k){if(v&&v!=""){return k+"="+encodeURIComponent(v)}}).join("&")
		break;
	}
	
	return url
}



//switch basemap
function switchBaseLayer(type, map){
	var layer = app.basemaps[type] || null;
	
	if(layer){
		if(map.currentBasemap){
			map.removeLayer(map.currentBasemap);
		}
		map.addLayer(layer);
		map.currentBasemap=layer;
		
		//fire baselayerchange event
		map.fire('baselayerchange', {layer: layer});
	}
}



//read opengraph
function readOpengraph($selector){
	var length=$selector.length,
		num=0,
		url=$selector.eq(num).find("a").attr("href"),
		urls={},
		$this,
		hasOpengraph=($selector.find("div.opengraph-thumbnail, div.opengraph-content").length>0)?true:false;
		
		
	//temporary disbable it to test if this cause the system unstable.
	
	if(!hasOpengraph){
		parse(url);
	}
	
	
	
	
	//parse
	function parse(u){
		if(!urls[u]){
			$.getJSON("../api/fetch?url="+u, function(json){
				if(json&&!json.error&&json.error!==null){
					urls[u]=json;
					
					show($selector.eq(num), json)
				}
				
				num++;
				if(num<length){
					parse($selector.eq(num).find("a").attr("href"))
				}else{
					//console.log('finish')
				}
			});
		}else{
			show($selector.eq(num), urls[u])
			
			num++
			if(num<length){
				parse($selector.eq(num).find("a").attr("href"))
			}else{
				//console.log('finish')
			}
		}
	}
	
	
	
	function show($target, json){
		var thumbnail=(json.image)?json.image:((json.images&&json.images.length>1)?json.images[0]:"img/avatar.png"),
			title=(json.title&&json.title!=""&&json.title!='undefined')?json.title:json.url,
			description=(json.description&&json.description!="")?substr(json.description, json.url):"",
			html="<div class='opengraph-thumbnail'><img src='"+thumbnail+"' /></div>"+
				 "<div class='opengraph-content'><div class='opengraph-title'><a href='"+json.url+"' target='_blank'>"+title+"</a></div><div class='opengraph-description'>"+description+"</div></div>";
		
		$target.html(html);
		
		function substr(text, url){
			var n=350;
			if(text.length>n){
				return text.substr(0, n) + "....<a target='_blank' href='"+url+"'>show more</a>";
			}else{
				return text
			}
			
		}
	}
	
}

//add comma
function addComma(val){
	while (/(\d+)(\d{3})/.test(val.toString())){
		val = val.toString().replace(/(\d+)(\d{3})/, '$1'+','+'$2');
	}
	return val;
}


//read retweet content
function readRetweet($selector){
	var length=$selector.length,
		num=0;
	
	if(length>0){
		$selector.each(function(){
			var $this=$(this),
				tweetID=$this.attr('data-value');
			
			if(tweetID && tweetID!=""){
				$.getJSON("https://api.twitter.com/1/statuses/oembed.json?id="+tweetID+"&omit_script=true&callback=?", function(json){
					if(json&&json.html&&json.html!=""){
						$this.parent().html(json.html);
						
						//show twitter widget when finish reading all tweet
						if(num==length-1){
							twttr.widgets.load()
						}
						num++;
					}
				})
			}
		});
	}
	
	
	//start anyway to load and create twitter widgets after 5 secs
	setTimeout(function(){
		//twttr.widgets.load()
	}, 5000)
	
}


//show popup
function showPopup(topic){
	var $target;
	
	switch(topic){
		case "selectTopic":
			$target=$("#popupTopic")
		break;
		case "ebola":
			$target=$("#popupEbola");
		break;
	}
	
	$target.modal({
		show:true,
		keyboard:false,
		backdrop:'static'
	}).find(".modal-body ul > li").click(function(){
		window.location=$(this).attr('href');
	});
}


